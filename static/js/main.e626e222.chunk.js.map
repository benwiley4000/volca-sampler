{"version":3,"sources":["webpack:///./src/Header.module.scss?0729","webpack:///./src/SampleRecord.module.scss?a416","Header.js","utils/constants.js","store.js","utils/audioData.js","utils/waveform.js","WaveformDisplay.js","SampleList.js","WaveformEdit.js","utils/getSyroBindings.js","utils/syro.js","VolcaTransferControl.js","SampleDetail.js","utils/recording.js","SampleRecord.js","App.js","reportWebVitals.js","index.js"],"names":[],"mappings":"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","file":"static/js/main.e626e222.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__R3bRx\",\"menuIcon\":\"Header_menuIcon__swn7p\",\"titleText\":\"Header_titleText__3e5ME\",\"titleR\":\"Header_titleR__3QRgv\",\"titleStarburst\":\"Header_titleStarburst__1oLYP\",\"titleGraphic\":\"Header_titleGraphic__3S89F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recordButton\":\"SampleRecord_recordButton__3R-KX\"};","import React from 'react';\n\nimport classes from './Header.module.scss';\n\n/**\n * @param {{ onMenuOpen: () => void, onHeaderClick: () => void }} props\n * @returns\n */\nfunction Header({ onMenuOpen, onHeaderClick }) {\n  return (\n    <h1 className={classes.title} onClick={onHeaderClick}>\n      <span\n        className={classes.menuIcon}\n        onClick={(e) => {\n          e.stopPropagation();\n          onMenuOpen();\n        }}\n      >\n        ☰\n      </span>\n      <span className={classes.titleText} data-text=\"Volca Sample\">\n        Volca Sample\n        <span className={classes.titleR}>r</span>\n        <div className={classes.titleStarburst}>\n          {\n            /** @type {void[]} */ (Array(24)).fill().map((_, i, { length }) => (\n              <span\n                key={i}\n                // @ts-ignore\n                style={{ '--rotation': `${(i * 360) / length}deg` }}\n              />\n            ))\n          }\n        </div>\n      </span>\n      <img className={classes.titleGraphic} src=\"volca_sample.png\" alt=\"\" />\n      <svg width={0} height={0}>\n        {/* https://tympanus.net/codrops/2019/01/22/svg-filter-effects-outline-text-with-femorphology/ */}\n        <filter id=\"outline\">\n          <feMorphology\n            in=\"SourceAlpha\"\n            result=\"DILATED\"\n            operator=\"dilate\"\n            radius=\"1\"\n          ></feMorphology>\n          <feFlood\n            floodColor=\"var(--stroke-color)\"\n            floodOpacity=\"1\"\n            result=\"PINK\"\n          ></feFlood>\n          <feComposite\n            in=\"PINK\"\n            in2=\"DILATED\"\n            operator=\"in\"\n            result=\"OUTLINE\"\n          ></feComposite>\n          <feMerge>\n            <feMergeNode in=\"OUTLINE\" />\n            <feMergeNode in=\"SourceGraphic\" />\n          </feMerge>\n        </filter>\n      </svg>\n    </h1>\n  );\n}\n\nexport default Header;\n","export const SAMPLE_RATE = 31250;\n","import localforage from 'localforage';\nimport { v4 as uuidv4 } from 'uuid';\nimport { decode as decodeBase64 } from 'base64-arraybuffer';\n\nimport { SAMPLE_RATE } from './utils/constants.js';\nimport { getSamplePeaksForSourceFile } from './utils/waveform.js';\n\n/**\n * @typedef {{\n *   frames: [number, number];\n *   waveformPeaks: import('./utils/waveform').SamplePeaks;\n * }} TrimInfo\n */\n\n/**\n * @typedef {object} SampleContainerParams\n * @property {string} name\n * @property {string} sourceFileId\n * @property {TrimInfo} trim\n * @property {string} [id]\n * @property {{ type: string; ext: string } | null} [userFileInfo]\n * @property {number} [slotNumber]\n * @property {number} [dateSampled]\n * @property {number} [dateModified]\n * @property {boolean} [useCompression]\n * @property {number} [qualityBitDepth]\n * @property {number} [scaleCoefficient]\n */\n\n/**\n * @typedef {object} SampleMetadata\n * @property {string} name\n * @property {string} sourceFileId\n * @property {TrimInfo} trim\n * @property {{ type: string; ext: string } | null} userFileInfo\n * @property {number} slotNumber\n * @property {number} dateSampled\n * @property {number} dateModified\n * @property {boolean} useCompression\n * @property {number} qualityBitDepth\n * @property {number} scaleCoefficient\n * @property {string} metadataVersion\n */\n\n/**\n * @typedef {object} SampleMetadataUpdate\n * @property {string} [name]\n * @property {TrimInfo} [trim]\n * @property {number} [slotNumber]\n * @property {boolean} [useCompression]\n * @property {number} [qualityBitDepth]\n * @property {number} [scaleCoefficient]\n */\n\n/**\n * @typedef {SampleMetadataUpdate | ((metadata: SampleMetadata) => SampleMetadataUpdate)} SampleMetadataUpdateArg\n */\n\nconst audioFileDataStore = localforage.createInstance({\n  name: 'audio_file_data',\n  driver: localforage.INDEXEDDB,\n});\n\nconst sampleMetadataStore = localforage.createInstance({\n  name: 'sample_metadata',\n  driver: localforage.INDEXEDDB,\n});\n\n/**\n * @param {Uint8Array} audioFileData\n * @returns {Promise<string>} id\n */\nexport async function storeAudioSourceFile(audioFileData) {\n  const id = uuidv4();\n  await audioFileDataStore.setItem(id, audioFileData);\n  return id;\n}\n\nconst METADATA_VERSION = '0.3.0';\n\n// These properties are considered fundamental and should never break\n/**\n * @typedef {{\n *   name: string;\n *   sourceFileId: string;\n *   id: string;\n *   metadataVersion: string;\n * }} OldMetadata\n */\n\n/**\n * @type {Record<string, (oldMetadata: OldMetadata) => OldMetadata | Promise<OldMetadata>>}\n */\nconst metadataUpgrades = {\n  '0.1.0': (oldMetadata) => {\n    /**\n     * @typedef {OldMetadata & { clip: [number, number] }} PrevMetadata\n     */\n    const { clip, ...prevMetadata } = /** @type {PrevMetadata} */ (oldMetadata);\n    const newMetadata = {\n      ...prevMetadata,\n      trimFrames: /** @type {[number, number]} */ (\n        clip.map((c) => Math.round(c * SAMPLE_RATE))\n      ),\n      metadataVersion: '0.2.0',\n    };\n    return newMetadata;\n  },\n  '0.2.0': async (oldMetadata) => {\n    /**\n     * @typedef {OldMetadata & { trimFrames: [number, number] }} PrevMetadata\n     */\n    const { trimFrames, ...prevMetadata } = /** @type {PrevMetadata} */ (\n      oldMetadata\n    );\n    const waveformPeaks = await getSamplePeaksForSourceFile(\n      prevMetadata.sourceFileId,\n      trimFrames\n    );\n    /**\n     * @type {TrimInfo}\n     */\n    const trim = {\n      frames: trimFrames,\n      waveformPeaks,\n    };\n    const newMetadata = {\n      ...prevMetadata,\n      trim,\n      metadataVersion: '0.3.0',\n    };\n    return newMetadata;\n  },\n};\n\n/**\n * @param {OldMetadata} oldMetadata\n * @returns {Promise<SampleMetadata>}\n */\nasync function upgradeMetadata(oldMetadata) {\n  let prevMetadata = oldMetadata;\n  while (prevMetadata.metadataVersion !== METADATA_VERSION) {\n    /**\n     * @type {(typeof metadataUpgrades)[string] | undefined}\n     */\n    const matchedUpgrade = metadataUpgrades[oldMetadata.metadataVersion];\n    if (!matchedUpgrade) {\n      console.warn(\n        `Failed to properly upgrade metadata for sample \"${prevMetadata.name}\"`\n      );\n      prevMetadata = {\n        name: prevMetadata.name,\n        sourceFileId: prevMetadata.sourceFileId,\n        id: prevMetadata.id,\n        metadataVersion: METADATA_VERSION,\n      };\n      break;\n    }\n    prevMetadata = await matchedUpgrade(prevMetadata);\n  }\n  return /** @type {SampleMetadata} */ (/** @type {unknown} */ (prevMetadata));\n}\n\nexport class SampleContainer {\n  /**\n   * @param {SampleContainerParams} sampleContainerParams\n   */\n  constructor({\n    name,\n    sourceFileId,\n    trim,\n    id = uuidv4(),\n    userFileInfo = null,\n    slotNumber = 0,\n    dateSampled = Date.now(),\n    dateModified = dateSampled,\n    useCompression = true,\n    qualityBitDepth = 16,\n    scaleCoefficient = 1,\n  }) {\n    /** @readonly */\n    this.id = id;\n    /**\n     * @readonly\n     * @type {SampleMetadata}\n     */\n    this.metadata = {\n      name,\n      sourceFileId,\n      trim,\n      userFileInfo,\n      slotNumber,\n      dateSampled,\n      dateModified,\n      useCompression,\n      qualityBitDepth,\n      scaleCoefficient,\n      metadataVersion: METADATA_VERSION,\n    };\n  }\n\n  /**\n   * @returns {SampleContainer}\n   */\n  duplicate() {\n    const copy = new SampleContainer.Mutable({\n      ...this.metadata,\n      name: `${this.metadata.name} (copy)`,\n      dateModified: Date.now(),\n    });\n    // async - does not block\n    copy.persist();\n    return copy;\n  }\n\n  static Mutable = class extends SampleContainer {\n    /**\n     * @param {SampleContainerParams} sampleContainerParams\n     */\n    constructor(sampleContainerParams) {\n      super(sampleContainerParams);\n      setTimeout(async () => {\n        const ids = await sampleMetadataStore.keys();\n        if (!ids.includes(this.id)) {\n          console.warn(\n            `Expected sample metadata container ${this.id} to be persisted`\n          );\n        }\n      });\n    }\n\n    async persist() {\n      await sampleMetadataStore.setItem(this.id, this.metadata);\n    }\n\n    /**\n     * @param {SampleMetadataUpdateArg} updater\n     * @returns {SampleContainer}\n     */\n    update(updater) {\n      const { id, metadata } = this;\n      const update =\n        typeof updater === 'function' ? updater(metadata) : updater;\n      // if the update doesn't change anything, return the existing container\n      if (\n        /** @type {(keyof SampleMetadataUpdate)[]} */ (\n          Object.keys(update)\n        ).every((key) => update[key] === metadata[key])\n      ) {\n        return this;\n      }\n      /**\n       * @type {SampleMetadata}\n       */\n      const newMetadata = {\n        ...metadata,\n        ...update,\n        dateModified: Date.now(),\n      };\n      const newContainer = new SampleContainer.Mutable({ id, ...newMetadata });\n      // async - does not block\n      newContainer.persist();\n      return newContainer;\n    }\n\n    async remove() {\n      await sampleMetadataStore.removeItem(this.id);\n      // if the source file is on the server, don't worry about cleanup\n      if (this.metadata.sourceFileId.includes('.')) {\n        return;\n      }\n      // check if source file is used by other sample containers\n      const allMetadata = await SampleContainer.getAllMetadataFromStore();\n      for (const [, { sourceFileId }] of allMetadata) {\n        if (sourceFileId === this.metadata.sourceFileId) {\n          // still used.. don't do anything\n          return;\n        }\n      }\n      // clean up dangling source file from storage\n      await audioFileDataStore.removeItem(this.metadata.sourceFileId);\n    }\n  };\n\n  /**\n   * @private\n   * @type {Map<string, Uint8Array>}\n   */\n  static sourceFileData = new Map();\n\n  /**\n   * @private\n   * @type {string[]}\n   */\n  static recentlyCachedSourceFileIds = [];\n\n  /** @readonly @private */\n  static MAX_CACHED = 10;\n\n  /**\n   * @param {string} sourceFileId\n   * @param {Uint8Array} data\n   */\n  static cacheSourceFileData(sourceFileId, data) {\n    this.sourceFileData.set(sourceFileId, data);\n    this.recentlyCachedSourceFileIds = [\n      sourceFileId,\n      ...this.recentlyCachedSourceFileIds.filter((id) => id !== sourceFileId),\n    ];\n    const stale = this.recentlyCachedSourceFileIds.slice(this.MAX_CACHED);\n    for (const sourceFileId of stale) {\n      this.sourceFileData.delete(sourceFileId);\n    }\n    this.recentlyCachedSourceFileIds = this.recentlyCachedSourceFileIds.slice(\n      0,\n      this.MAX_CACHED\n    );\n  }\n\n  /**\n   * @param {string} sourceFileId\n   * @returns {Promise<Uint8Array>}\n   */\n  static async getSourceFileData(sourceFileId) {\n    {\n      const data = this.sourceFileData.get(sourceFileId);\n      if (data) {\n        return data;\n      }\n    }\n    if (sourceFileId.includes('.')) {\n      const res = await fetch(sourceFileId);\n      if (res.status >= 400) {\n        return Promise.reject(\n          new Error(`Failed to fetch source file \"${sourceFileId}\"`)\n        );\n      }\n      // assume it's a URL pointing to a an audio file\n      const buffer = await res.arrayBuffer();\n      const data = new Uint8Array(buffer);\n      this.cacheSourceFileData(sourceFileId, data);\n      return data;\n    }\n    /**\n     * @type {unknown}\n     */\n    const data = await audioFileDataStore.getItem(sourceFileId);\n    if (data) {\n      if (data instanceof Uint8Array) {\n        this.cacheSourceFileData(sourceFileId, data);\n        return data;\n      }\n      return Promise.reject('Source data is of unexpected type');\n    }\n    return Promise.reject('Missing source data');\n  }\n\n  /**\n   * @protected\n   */\n  static async getAllMetadataFromStore() {\n    /**\n     * @type {Map<string, SampleMetadata>}\n     */\n    const sampleMetadata = new Map();\n    /**\n     * @type {Promise<void>[]}\n     */\n    const upgradePromises = [];\n    await sampleMetadataStore.iterate((metadata, id) => {\n      if (metadata) {\n        upgradePromises.push(\n          upgradeMetadata(metadata)\n            .then((upgradedMetadata) => {\n              sampleMetadata.set(id, upgradedMetadata);\n            })\n            .catch((err) => {\n              console.error(err);\n              console.warn(\n                `Failed to upgrade metadata \"${id}\" (${metadata.name}); ignoring.`\n              );\n            })\n        );\n      }\n    });\n    await Promise.all(upgradePromises);\n    return sampleMetadata;\n  }\n\n  static async getAllFromStorage() {\n    const sampleMetadata = await this.getAllMetadataFromStore();\n    const factorySampleParams = await getFactorySampleParams();\n    const sourceIds = (await audioFileDataStore.keys()).concat(\n      factorySampleParams.map(({ sourceFileId }) => sourceFileId)\n    );\n    const sampleContainers = /** @type {SampleContainer[]} */ (\n      [...sampleMetadata]\n        .map(([id, metadata]) => {\n          const { sourceFileId } = metadata;\n          if (!sourceIds.includes(sourceFileId)) {\n            console.warn(\n              `Found metadata \"${\n                metadata.name || id\n              }\" with missing data \"${sourceFileId}; ignoring.`\n            );\n            return null;\n          }\n          return new SampleContainer.Mutable({ id, ...metadata });\n        })\n        .filter(Boolean)\n    ).sort((a, b) => b.metadata.dateModified - a.metadata.dateModified);\n    return sampleContainers;\n  }\n}\n\n/**\n * @type {Promise<import('../public/factory-samples.json')> | undefined}\n */\nlet factorySampleParamsPromise;\nfunction getFactorySampleParams() {\n  if (!factorySampleParamsPromise) {\n    factorySampleParamsPromise = fetch('factory-samples.json').then((res) =>\n      res.json()\n    );\n  }\n  return factorySampleParamsPromise;\n}\n\nexport async function getFactorySamples() {\n  const factorySampleParams = await getFactorySampleParams();\n  return new Map(\n    factorySampleParams.map((params) => [\n      params.id,\n      new SampleContainer({\n        ...params,\n        trim: {\n          frames: [params.trim.frames[0], params.trim.frames[1]],\n          waveformPeaks: {\n            positive: new Float32Array(\n              decodeBase64(params.trim.waveformPeaks.positive)\n            ),\n            negative: new Float32Array(\n              decodeBase64(params.trim.waveformPeaks.negative)\n            ),\n          },\n        },\n      }),\n    ])\n  );\n}\n","import {\n  createContext,\n  createElement,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport getWavFileHeaders from 'wav-headers';\n\nimport { SampleContainer } from '../store.js';\nimport { SAMPLE_RATE } from './constants.js';\n\n/**\n * @param {Float32Array} array\n * @param {[number, number]} trimFrames\n */\nexport function getTrimmedView(array, trimFrames) {\n  const frameSizeInBytes = 4;\n  const byteOffset = trimFrames[0] * frameSizeInBytes;\n  const viewLength = array.length - trimFrames[0] - trimFrames[1];\n  return new Float32Array(array.buffer, byteOffset, viewLength);\n}\n\n/**\n * @param {AudioBuffer} audioBuffer\n * @param {[number, number]} trimFrames\n */\nexport function getMonoSamplesFromAudioBuffer(audioBuffer, trimFrames) {\n  const trimmedLength = audioBuffer.length - trimFrames[0] - trimFrames[1];\n  const samples = new Float32Array(trimmedLength);\n  const channels = /** @type {void[]} */ (Array(audioBuffer.numberOfChannels))\n    .fill()\n    .map((_, i) => getTrimmedView(audioBuffer.getChannelData(i), trimFrames));\n  for (let i = 0; i < trimmedLength; i++) {\n    let monoSample = 0;\n    for (let j = 0; j < channels.length; j++) {\n      monoSample += channels[j][i];\n    }\n    monoSample /= channels.length;\n    samples[i] = monoSample;\n  }\n  return samples;\n}\n\n/**\n * Finds most significant magnitude in array of samples.\n * @param {Float32Array} samples array of floats between -1 and 1\n * @returns {number} peak value between 0 and 1\n */\nexport function findSamplePeak(samples) {\n  let peak = 0;\n  for (const sample of samples) {\n    const abs = Math.abs(sample);\n    if (abs > peak) {\n      peak = abs;\n    }\n  }\n  return peak;\n}\n\n/**\n * Scales an array of samples according to a specified coefficient.\n * Note: mutates input array (no return value).\n * @param {Float32Array} samples array of floats\n * @param {number} coef float value to multiply against each sample\n */\nfunction scaleSamples(samples, coef) {\n  if (coef !== 1) {\n    for (let i = 0; i < samples.length; i++) {\n      samples[i] *= coef;\n    }\n  }\n}\n\n/**\n * Reduces precision of samples by converting them to integers of a given bit\n * depth then back to floats. Note: mutates input array (no return value).\n * @param {Float32Array} samples array of floats between -1 and 1\n * @param {number} qualityBitDepth number from 8 to 16\n */\nfunction applyQualityBitDepthToSamples(samples, qualityBitDepth) {\n  const signedMax = 2 ** (qualityBitDepth - 1);\n  for (let i = 0; i < samples.length; i++) {\n    samples[i] = Math.round(samples[i] * signedMax) / signedMax;\n  }\n}\n\n/**\n * Check for values greater than 1 or less than -1 and just clamp them (ideally\n * we shouldn't have out-of-bounds samples but this sometimes happens.. by\n * clamping them we kind of force the user to deal with the input levels).\n * Note: mutates input array (no return value).\n * @param {Float32Array} samples array of floats\n */\nexport function clampOutOfBoundsValues(samples) {\n  for (let i = 0; i < samples.length; i++) {\n    if (samples[i] > 1) {\n      samples[i] = 1;\n    } else if (samples[i] < -1) {\n      samples[i] = -1;\n    }\n  }\n}\n\n/**\n * @param {Float32Array[]} sampleChannels\n * @returns {Float32Array}\n */\nexport function interleaveSampleChannels(sampleChannels) {\n  const channelCount = sampleChannels.length;\n  const sampleCount = sampleChannels[0].length;\n  const interleaved = new Float32Array(channelCount * sampleCount);\n  for (let sampleIndex = 0; sampleIndex < interleaved.length; sampleIndex++) {\n    const i = channelCount * sampleIndex;\n    for (let ch = 0; ch < channelCount; ch++) {\n      interleaved[i + ch] = sampleChannels[ch][sampleIndex];\n    }\n  }\n  return interleaved;\n}\n\n/**\n * @template {32 | 16} B\n * @param {Float32Array} samples\n * @param {B} bitsPerSample\n * @returns {B extends 16 ? Int16Array : B extends 32 ? Int32Array : never}\n */\nexport function convertFloatSamplesToPcm(samples, bitsPerSample) {\n  const ArrayConstructor = bitsPerSample === 16 ? Int16Array : Int32Array;\n  const pcmSamples = new ArrayConstructor(samples.length);\n  const signedMax = 2 ** (bitsPerSample - 1);\n  for (let i = 0; i < samples.length; i++) {\n    pcmSamples[i] = samples[i] === 1 ? signedMax - 1 : signedMax * samples[i];\n  }\n  // @ts-ignore (it works!)\n  return pcmSamples;\n}\n\nexport function getAudioContextConstructor() {\n  /**\n   * @typedef {typeof window.AudioContext} AudioContextConstructor\n   */\n  const AudioContext =\n    window.AudioContext ||\n    /**\n     * @type {typeof window & {\n     *   webkitAudioContext: AudioContextConstructor;\n     * }}\n     */ (window).webkitAudioContext;\n  return AudioContext;\n}\n\n/**\n * @type {AudioContext | undefined}\n */\nlet targetAudioContext;\n\nfunction getTargetAudioContext() {\n  const AudioContext = getAudioContextConstructor();\n  return (targetAudioContext =\n    targetAudioContext || new AudioContext({ sampleRate: SAMPLE_RATE }));\n}\n\n/**\n * @param {Uint8Array} audioFileBuffer audio file to transform into audio buffer\n * @returns {Promise<AudioBuffer>}\n */\nexport async function getAudioBufferForAudioFileData(audioFileBuffer) {\n  // make a copy of the data (since decodeAudioData will empty the source array)\n  const bufferCopy = new Uint8Array(audioFileBuffer);\n  /**\n   * @type {AudioBuffer}\n   */\n  const audioBuffer = await new Promise((resolve, reject) => {\n    getTargetAudioContext().decodeAudioData(bufferCopy.buffer, resolve, reject);\n  });\n  return audioBuffer;\n}\n\n/**\n * @param {string} sourceFileId sourceFileId to grab from store\n * @param {boolean} shouldClampValues do we need to clamp out of bounds values\n * @returns {Promise<AudioBuffer>}\n */\nexport async function getSourceAudioBuffer(sourceFileId, shouldClampValues) {\n  const sourceFileData = await SampleContainer.getSourceFileData(sourceFileId);\n  const audioBuffer = await getAudioBufferForAudioFileData(sourceFileData);\n  if (shouldClampValues) {\n    for (let channel = 0; channel < audioBuffer.numberOfChannels; channel++) {\n      clampOutOfBoundsValues(audioBuffer.getChannelData(channel));\n    }\n  }\n  return audioBuffer;\n}\n\n/**\n * Given sample container, returns a 16-bit mono wav file with the sample's\n * metadata parameters applied\n * @param {import('../store').SampleContainer} sampleContainer\n * @returns {Promise<{ data: Uint8Array; sampleRate: number }>}\n */\nexport async function getTargetWavForSample(sampleContainer) {\n  const {\n    qualityBitDepth,\n    sourceFileId,\n    userFileInfo,\n    scaleCoefficient,\n    trim: { frames: trimFrames },\n  } = sampleContainer.metadata;\n  if (\n    qualityBitDepth < 8 ||\n    qualityBitDepth > 16 ||\n    !Number.isInteger(qualityBitDepth)\n  ) {\n    throw new Error(\n      `Expected bit depth between 8 and 16. Received: ${qualityBitDepth}`\n    );\n  }\n  const sourceAudioBuffer = await getSourceAudioBuffer(\n    sourceFileId,\n    Boolean(userFileInfo)\n  );\n  const samples =\n    sourceAudioBuffer.numberOfChannels === 1\n      ? getTrimmedView(sourceAudioBuffer.getChannelData(0), trimFrames)\n      : getMonoSamplesFromAudioBuffer(sourceAudioBuffer, trimFrames);\n  if (scaleCoefficient !== 1) {\n    scaleSamples(samples, scaleCoefficient);\n  }\n  if (qualityBitDepth < 16) {\n    applyQualityBitDepthToSamples(samples, qualityBitDepth);\n  }\n  const samples16 = convertFloatSamplesToPcm(samples, 16);\n  const samplesByteLength = samples16.length * 2;\n  /**\n   * @type {Uint8Array}\n   */\n  const wavHeader = getWavFileHeaders({\n    channels: 1,\n    sampleRate: sourceAudioBuffer.sampleRate,\n    bitDepth: 16,\n    dataLength: samplesByteLength,\n  });\n  const wavBuffer = new Uint8Array(wavHeader.length + samplesByteLength);\n  wavBuffer.set(wavHeader);\n  wavBuffer.set(new Uint8Array(samples16.buffer), wavHeader.length);\n  return {\n    data: wavBuffer,\n    sampleRate: 16,\n  };\n}\n\nconst audioPlaybackContextDefaultValue = {\n  /**\n   * @param {AudioBuffer} audioBuffer buffer to play\n   * @param {{\n   *   onTimeUpdate?: (currentTime: number) => void;\n   *   onEnded?: () => void;\n   * }} [opts]\n   * @returns {() => void} stop\n   */\n  playAudioBuffer(audioBuffer, opts) {\n    throw new Error('Must render AudioPlaybackContextProvider');\n  },\n  isAudioBusy: false,\n};\n\nconst AudioPlaybackContext = createContext(audioPlaybackContextDefaultValue);\n\n/**\n * @param {React.PropsWithChildren<{}>} props\n * @returns\n */\nexport function AudioPlaybackContextProvider({ children }) {\n  const [isAudioBusy, setIsAudioBusy] = useState(false);\n\n  const playAudioBuffer = useCallback(\n    /**\n     * @type {(typeof audioPlaybackContextDefaultValue.playAudioBuffer)}\n     */\n    (audioBuffer, { onTimeUpdate = () => null, onEnded = () => null } = {}) => {\n      if (isAudioBusy) {\n        throw new Error(\n          'Wait until audio playback has finished to start new playback'\n        );\n      }\n      setIsAudioBusy(true);\n      /**\n       * @type {AudioContext}\n       */\n      let audioContext;\n      /**\n       * @type {AudioBufferSourceNode}\n       */\n      let source;\n      try {\n        audioContext = getTargetAudioContext();\n        source = audioContext.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(audioContext.destination);\n        source.start();\n      } catch (err) {\n        setIsAudioBusy(false);\n        throw err;\n      }\n      const startTime = audioContext.currentTime;\n      onTimeUpdate(0);\n      let frame = requestAnimationFrame(updateCurrentTime);\n      function updateCurrentTime() {\n        onTimeUpdate(audioContext.currentTime - startTime);\n        frame = requestAnimationFrame(updateCurrentTime);\n      }\n      let stopped = false;\n      source.addEventListener('ended', () => {\n        if (!stopped) {\n          onTimeUpdate(audioBuffer.duration);\n          onEnded();\n        }\n        setIsAudioBusy(false);\n        cancelAnimationFrame(frame);\n      });\n      return function stop() {\n        source.stop();\n        stopped = true;\n      };\n    },\n    [isAudioBusy]\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      playAudioBuffer,\n      isAudioBusy,\n    }),\n    [playAudioBuffer, isAudioBusy]\n  );\n\n  return createElement(\n    AudioPlaybackContext.Provider,\n    { value: contextValue },\n    children\n  );\n}\n\nexport function useAudioPlaybackContext() {\n  return useContext(AudioPlaybackContext);\n}\n","import {\n  getMonoSamplesFromAudioBuffer,\n  getSourceAudioBuffer,\n} from './audioData.js';\n\nexport const GROUP_PIXEL_WIDTH = 6;\n\nexport const WAVEFORM_CACHED_WIDTH = GROUP_PIXEL_WIDTH * 44; // 264\n\n/**\n * @typedef {{ positive: Float32Array; negative: Float32Array }} SamplePeaks\n */\n\n/**\n * @param {Float32Array} samples an array of floats from -1 to 1\n * @param {number} containerPixelWidth the size of the waveform container\n * @returns {SamplePeaks} arrays of peak positive and negative values\n */\nexport function getPeaksForSamples(samples, containerPixelWidth) {\n  // the number of samples represented for each peak\n  const groupSize = Math.floor(\n    (GROUP_PIXEL_WIDTH * samples.length) / containerPixelWidth\n  );\n  // Cut off whatever's left after dividing into blocks of length [groupSize]\n  const positive = new Float32Array(Math.floor(samples.length / groupSize));\n  const negative = new Float32Array(Math.floor(samples.length / groupSize));\n  for (let i = 0; i < positive.length; i++) {\n    const group = new Float32Array(\n      samples.buffer,\n      i * groupSize * 4,\n      groupSize\n    );\n    let max = 0;\n    let min = 0;\n    for (const sample of group) {\n      if (sample > max) {\n        max = sample;\n      }\n      if (sample < min) {\n        min = sample;\n      }\n    }\n    // clamp in case there are out-of-bounds values\n    positive[i] = Math.min(1, max);\n    negative[i] = Math.max(-1, min);\n  }\n  return { positive, negative };\n}\n\n/**\n * @param {string} sourceFileId\n * @param {[number, number]} trimFrames\n */\nexport async function getSamplePeaksForSourceFile(sourceFileId, trimFrames) {\n  const audioBuffer = await getSourceAudioBuffer(sourceFileId, false);\n  const monoSamples = getMonoSamplesFromAudioBuffer(audioBuffer, trimFrames);\n  const waveformPeaks = getPeaksForSamples(monoSamples, WAVEFORM_CACHED_WIDTH);\n  return waveformPeaks;\n}\n","import React, {\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { styled } from 'tonami';\nimport ResizeObserver from 'resize-observer-polyfill';\n\nimport { GROUP_PIXEL_WIDTH } from './utils/waveform.js';\n\nconst WaveformCanvas = styled.canvas({\n  width: '100%',\n  height: '100%',\n  display: 'block',\n  imageRendering: 'pixelated',\n});\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {(size: {width: number; height: number}) => void} onResize\n */\nfunction observeCanvas(canvas, onResize) {\n  /**\n   * @param {number} width\n   * @param {number} height\n   */\n  function setCanvasSize(width, height) {\n    canvas.width = width;\n    canvas.height = height;\n  }\n  setCanvasSize(canvas.offsetWidth, canvas.offsetHeight);\n  onResize({ width: canvas.offsetWidth, height: canvas.offsetHeight });\n  const observer = new ResizeObserver(([entry]) => {\n    const { width, height } = entry.contentRect;\n    setCanvasSize(width, height);\n    onResize({ width, height });\n  });\n  observer.observe(canvas);\n  return () => observer.disconnect();\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {import('./utils/waveform.js').SamplePeaks} peaks\n * @param {number} scaleCoefficient\n */\nfunction drawWaveform(canvas, peaks, scaleCoefficient) {\n  const documentStyle = getComputedStyle(document.documentElement);\n  const colorRed = documentStyle.getPropertyValue('--bs-primary');\n  const colorDarkRed = documentStyle.getPropertyValue('--bs-primary-darkened');\n  const ctx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n  ctx.imageSmoothingEnabled = false;\n  const { width, height } = canvas;\n  ctx.clearRect(0, 0, width, height);\n  const positiveHeight = Math.floor(height * (2 / 3)) + 1;\n  ctx.fillStyle = colorRed;\n  peaks.positive.forEach((peak, i) => {\n    const basePeakHeight = positiveHeight * peak; // float\n    // make the positive bar always at least 1px tall to avoid empty sections\n    const scaledPeakHeight = Math.max(\n      Math.round(scaleCoefficient * basePeakHeight),\n      1\n    );\n    ctx.fillRect(\n      i * GROUP_PIXEL_WIDTH,\n      positiveHeight - scaledPeakHeight,\n      GROUP_PIXEL_WIDTH - 1,\n      scaledPeakHeight\n    );\n  });\n  const negativeHeight = height - positiveHeight;\n  ctx.fillStyle = colorDarkRed;\n  peaks.negative.forEach((peak, i) => {\n    const basePeakHeight = negativeHeight * peak * -1; // float\n    const scaledPeakHeight = Math.round(scaleCoefficient * basePeakHeight);\n    ctx.fillRect(\n      i * GROUP_PIXEL_WIDTH,\n      positiveHeight,\n      GROUP_PIXEL_WIDTH - 1,\n      scaledPeakHeight\n    );\n  });\n}\n\n/**\n * @typedef {{\n *   peaks: import('./utils/waveform').SamplePeaks;\n *   scaleCoefficient: number;\n *   waveformRef?: React.Ref<HTMLElement | null>;\n * }} WaveformProps\n */\n\n/**\n * @param {WaveformProps} props\n */\nfunction WaveformDisplayCanvas({ peaks, scaleCoefficient, waveformRef }) {\n  /**\n   * @type {React.RefObject<HTMLCanvasElement>}\n   */\n  const canvasRef = useRef(null);\n  useImperativeHandle(waveformRef, () => canvasRef.current);\n  const [lastResize, setLastResize] = useState(Symbol());\n  const sizeRef = useRef({ width: 0, height: 0 });\n  useLayoutEffect(() => {\n    if (!canvasRef.current) {\n      throw new Error('Canvas should be defined');\n    }\n    // set sizeRef before setting up observer to avoid triggering\n    // the initial render multiple times\n    sizeRef.current.width = canvasRef.current.offsetWidth;\n    sizeRef.current.height = canvasRef.current.offsetHeight;\n    return observeCanvas(canvasRef.current, ({ width, height }) => {\n      if (\n        width !== sizeRef.current.width ||\n        height !== sizeRef.current.height\n      ) {\n        setLastResize(Symbol());\n        sizeRef.current.width = width;\n        sizeRef.current.height = height;\n      }\n    });\n  }, []);\n  useLayoutEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) {\n      throw new Error('Canvas should be defined');\n    }\n    // wait for animation frame..\n    let frame = requestAnimationFrame(() => {\n      // just before animation frame..\n      frame = requestAnimationFrame(() => {\n        // after animation frame..\n        // for some reason the draw doesn't reliably show up before this\n        drawWaveform(canvas, peaks, scaleCoefficient);\n      });\n    });\n    return () => cancelAnimationFrame(frame);\n  }, [peaks, scaleCoefficient, lastResize]);\n  return <WaveformCanvas ref={canvasRef} />;\n}\n\nexport default WaveformDisplayCanvas;\n","import React, { useLayoutEffect, useRef, useState } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { styled } from 'tonami';\nimport { WAVEFORM_CACHED_WIDTH } from './utils/waveform';\nimport WaveformDisplay from './WaveformDisplay';\n\nconst WaveformContainer = styled.div({\n  width: `${WAVEFORM_CACHED_WIDTH}px`,\n  height: '40px',\n});\n\nconst intersectionObserverAvailable =\n  typeof IntersectionObserver !== 'undefined';\n\nconst SampleListItem = React.memo(\n  /**\n   * @param {{\n   *   sample: import('./store').SampleContainer;\n   *   selected: boolean;\n   *   onSampleSelect: (id: string) => void;\n   * }} props\n   */\n  ({ sample, selected, onSampleSelect }) => {\n    /**\n     * @type {React.RefObject<HTMLDivElement>}\n     */\n    const waveformContainerRef = useRef(null);\n    const [waveformSeen, setWaveformSeen] = useState(\n      !intersectionObserverAvailable\n    );\n    useLayoutEffect(() => {\n      if (!intersectionObserverAvailable) {\n        return;\n      }\n      const waveformContainer = waveformContainerRef.current;\n      if (!waveformContainer) {\n        throw new Error('Waveform container should be defined');\n      }\n      // check if waveform is visible now.. if so, render immediately\n      const rect = waveformContainer.getBoundingClientRect();\n      if (\n        rect.top + rect.height >= 0 &&\n        rect.bottom - rect.height <= window.innerHeight\n      ) {\n        setWaveformSeen(true);\n        return;\n      }\n      // otherwise set up an observer for when the waveform does become visible\n      const observer = new IntersectionObserver(([entry]) => {\n        if (entry.isIntersecting) {\n          setWaveformSeen(true);\n          observer.unobserve(waveformContainer);\n        }\n      });\n      observer.observe(waveformContainer);\n      return () => observer.disconnect();\n    }, []);\n    return (\n      <ListGroup.Item\n        active={selected}\n        onClick={() => onSampleSelect(sample.id)}\n      >\n        <div>{sample.metadata.name}</div>\n        <WaveformContainer ref={waveformContainerRef}>\n          {waveformSeen && (\n            <WaveformDisplay\n              peaks={sample.metadata.trim.waveformPeaks}\n              scaleCoefficient={sample.metadata.scaleCoefficient}\n            />\n          )}\n        </WaveformContainer>\n      </ListGroup.Item>\n    );\n  }\n);\n\n/**\n * @param {{\n *   samples: Map<string, import('./store').SampleContainer>;\n *   selectedSampleId: string | null;\n *   onSampleSelect: (id: string) => void;\n * }} props\n */\nfunction SampleList({\n  samples,\n  selectedSampleId,\n  onSampleSelect,\n}) {\n  return (\n    <ListGroup variant=\"flush\">\n      {[...samples].map(([id, sample]) => (\n        <SampleListItem\n          key={id}\n          sample={sample}\n          selected={id === selectedSampleId}\n          onSampleSelect={onSampleSelect}\n        />\n      ))}\n    </ListGroup>\n  );\n}\n\nexport default SampleList;\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport {\n  getSourceAudioBuffer,\n  getMonoSamplesFromAudioBuffer,\n  findSamplePeak,\n  getTrimmedView,\n} from './utils/audioData.js';\nimport { getPeaksForSamples } from './utils/waveform.js';\nimport WaveformDisplay from './WaveformDisplay.js';\n\n/**\n * @typedef {{\n *   sample: import('./store').SampleContainer;\n *   onSetTrimFrames: (updateTrimFrames: (old: [number, number]) => [number, number]) => void;\n *   onSetScaleCoefficient: (scaleCoefficient: number) => void;\n * }} WaveformEditProps\n */\n\n/**\n * @param {WaveformEditProps & { sourceAudioBuffer: AudioBuffer | null }} props\n */\nfunction WaveformEdit({\n  sourceAudioBuffer,\n  sample: {\n    metadata: {\n      trim: { frames: trimFrames },\n      scaleCoefficient,\n    },\n  },\n  onSetTrimFrames,\n  onSetScaleCoefficient,\n}) {\n  const monoSamples = useMemo(\n    () =>\n      sourceAudioBuffer\n        ? getMonoSamplesFromAudioBuffer(sourceAudioBuffer, [0, 0])\n        : new Float32Array(),\n    [sourceAudioBuffer]\n  );\n\n  const [waveformElement, waveformRef] = useState(\n    /** @type {HTMLElement | null} */ (null)\n  );\n  const pixelWidth = useMemo(\n    () => waveformElement && waveformElement.offsetWidth,\n    [waveformElement]\n  );\n  const peaks = useMemo(() => {\n    if (!pixelWidth || !monoSamples.length) {\n      return {\n        positive: new Float32Array(),\n        negative: new Float32Array(),\n      };\n    }\n    return getPeaksForSamples(monoSamples, pixelWidth);\n  }, [pixelWidth, monoSamples]);\n\n  const trimmedSamplePeak = useMemo(() => {\n    if (!sourceAudioBuffer) {\n      return 0;\n    }\n    const trimmedView = getTrimmedView(monoSamples, trimFrames);\n    const samplePeak = findSamplePeak(trimmedView);\n    return samplePeak;\n  }, [sourceAudioBuffer, monoSamples, trimFrames]);\n\n  const maxCoefficient = 1 / trimmedSamplePeak;\n\n  // ensure that our max scaled sample in our trimmed view doesn't exceed 1 / -1\n  useLayoutEffect(() => {\n    if (scaleCoefficient > maxCoefficient) {\n      onSetScaleCoefficient(maxCoefficient);\n    }\n  }, [scaleCoefficient, maxCoefficient, onSetScaleCoefficient]);\n\n  // const peakTarget = scaleCoefficient * trimmedSamplePeak;\n\n  const trimPixels = useMemo(() => {\n    if (!monoSamples.length || !pixelWidth) {\n      return [0, 0];\n    }\n    const factor = pixelWidth / monoSamples.length;\n    return trimFrames.map((frames) => frames * factor);\n  }, [pixelWidth, monoSamples.length, trimFrames]);\n\n  const leftTrimLastX = useRef(/** @type {number | null} */ (null));\n  const rightTrimLastX = useRef(/** @type {number | null} */ (null));\n\n  useEffect(() => {\n    /** @param {MouseEvent} e */\n    function onMouseMove(e) {\n      if (\n        leftTrimLastX.current === null ||\n        !pixelWidth ||\n        !monoSamples.length\n      ) {\n        return;\n      }\n      const { pageX } = e;\n      const diff = pageX - leftTrimLastX.current;\n      if (diff) {\n        const ratio = diff / pixelWidth;\n        const frameDiff = Math.round(monoSamples.length * ratio);\n        onSetTrimFrames((trimFrames) => {\n          let newValue = trimFrames[0] + frameDiff;\n          // enforce at least 2000 sample selection\n          newValue = Math.min(\n            newValue,\n            monoSamples.length - trimFrames[1] - 2000\n          );\n          newValue = Math.max(newValue, 0);\n          return [newValue, trimFrames[1]];\n        });\n        leftTrimLastX.current = pageX;\n      }\n    }\n    function onMouseUp() {\n      leftTrimLastX.current = null;\n      document.body.style.userSelect = 'unset';\n    }\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [pixelWidth, monoSamples.length, onSetTrimFrames]);\n  useEffect(() => {\n    /** @param {MouseEvent} e */\n    function onMouseMove(e) {\n      if (\n        rightTrimLastX.current === null ||\n        !pixelWidth ||\n        !monoSamples.length\n      ) {\n        return;\n      }\n      const { pageX } = e;\n      const diff = rightTrimLastX.current - pageX;\n      if (diff) {\n        const ratio = diff / pixelWidth;\n        const frameDiff = Math.round(monoSamples.length * ratio);\n        onSetTrimFrames((trimFrames) => {\n          let newValue = trimFrames[1] + frameDiff;\n          // enforce at least 2000 sample selection\n          newValue = Math.min(\n            newValue,\n            monoSamples.length - trimFrames[0] - 2000\n          );\n          newValue = Math.max(newValue, 0);\n          return [trimFrames[0], newValue];\n        });\n        rightTrimLastX.current = pageX;\n      }\n    }\n    function onMouseUp() {\n      rightTrimLastX.current = null;\n      document.body.style.userSelect = 'unset';\n    }\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [pixelWidth, monoSamples.length, onSetTrimFrames]);\n\n  return (\n    <>\n      <div style={{ position: 'relative' }}>\n        <div style={{ position: 'absolute', right: 0, bottom: 4 }}>\n          <Button\n            type=\"button\"\n            variant=\"light\"\n            disabled={scaleCoefficient === maxCoefficient}\n            onClick={() => onSetScaleCoefficient(maxCoefficient)}\n          >\n            Normalize\n          </Button>{' '}\n          <Button\n            type=\"button\"\n            variant=\"light\"\n            disabled={scaleCoefficient === 1}\n            onClick={() => onSetScaleCoefficient(1)}\n          >\n            Original level\n          </Button>\n        </div>\n      </div>\n      <div style={{ position: 'relative', backgroundColor: '#f3f3f3' }}>\n        <WaveformDisplay\n          waveformRef={waveformRef}\n          peaks={peaks}\n          scaleCoefficient={scaleCoefficient}\n        />\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: `calc(100% - ${trimPixels[0]}px)`,\n            background: '#f3f3f3',\n          }}\n        >\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              right: 0,\n              width: 2,\n              background: 'var(--bs-dark)',\n            }}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              top: '100%',\n              right: 0,\n              width: 20,\n              height: 20,\n              background: 'var(--bs-dark)',\n              borderRadius: 10,\n              transform: 'translateX(50%)',\n            }}\n            onTouchStart={(e) => {\n              e.preventDefault();\n              document.body.style.userSelect = 'none';\n              leftTrimLastX.current = e.touches[0].pageX;\n            }}\n            onMouseDown={(e) => {\n              document.body.style.userSelect = 'none';\n              leftTrimLastX.current = e.pageX;\n            }}\n            onTouchMove={(e) => {\n              e.preventDefault();\n              if (\n                leftTrimLastX.current === null ||\n                !pixelWidth ||\n                !monoSamples.length\n              ) {\n                return;\n              }\n              const { pageX } = e.touches[0];\n              const diff = pageX - leftTrimLastX.current;\n              if (diff) {\n                const ratio = diff / pixelWidth;\n                const frameDiff = Math.round(monoSamples.length * ratio);\n                onSetTrimFrames((trimFrames) => {\n                  let newValue = trimFrames[0] + frameDiff;\n                  // enforce at least 2000 sample selection\n                  newValue = Math.min(\n                    newValue,\n                    monoSamples.length - trimFrames[1] - 2000\n                  );\n                  newValue = Math.max(newValue, 0);\n                  return [newValue, trimFrames[1]];\n                });\n                leftTrimLastX.current = pageX;\n              }\n            }}\n            onTouchEnd={() => {\n              leftTrimLastX.current = null;\n            }}\n            onTouchCancel={() => {\n              leftTrimLastX.current = null;\n            }}\n          />\n        </div>\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            right: 0,\n            left: `calc(100% - ${trimPixels[1]}px)`,\n            background: '#f3f3f3',\n          }}\n        >\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              bottom: 0,\n              left: 0,\n              width: 2,\n              background: 'var(--bs-dark)',\n            }}\n          />\n          <div\n            style={{\n              position: 'absolute',\n              top: '100%',\n              left: 0,\n              width: 20,\n              height: 20,\n              background: 'var(--bs-dark)',\n              borderRadius: 10,\n              transform: 'translateX(-50%)',\n            }}\n            onTouchStart={(e) => {\n              e.preventDefault();\n              document.body.style.userSelect = 'none';\n              rightTrimLastX.current = e.touches[0].pageX;\n            }}\n            onMouseDown={(e) => {\n              document.body.style.userSelect = 'none';\n              rightTrimLastX.current = e.pageX;\n            }}\n            onTouchMove={(e) => {\n              e.preventDefault();\n              if (\n                rightTrimLastX.current === null ||\n                !pixelWidth ||\n                !monoSamples.length\n              ) {\n                return;\n              }\n              const { pageX } = e.touches[0];\n              const diff = rightTrimLastX.current - pageX;\n              if (diff) {\n                const ratio = diff / pixelWidth;\n                const frameDiff = Math.round(monoSamples.length * ratio);\n                onSetTrimFrames((trimFrames) => {\n                  let newValue = trimFrames[1] + frameDiff;\n                  // enforce at least 2000 sample selection\n                  newValue = Math.min(\n                    newValue,\n                    monoSamples.length - trimFrames[0] - 2000\n                  );\n                  newValue = Math.max(newValue, 0);\n                  return [trimFrames[0], newValue];\n                });\n                rightTrimLastX.current = pageX;\n              }\n            }}\n            onTouchEnd={() => {\n              rightTrimLastX.current = null;\n            }}\n            onTouchCancel={() => {\n              rightTrimLastX.current = null;\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\n/**\n *\n * @param {WaveformEditProps} props\n */\nfunction AsyncWaveformEdit({ sample, ...rest }) {\n  const [loadedAudioBuffer, setSourceAudioBuffer] = useState(\n    /** @type {[string, AudioBuffer] | null} */ (null)\n  );\n  useEffect(() => {\n    let cancelled = false;\n    (async () => {\n      if (cancelled) return;\n      const audioBuffer = await getSourceAudioBuffer(\n        sample.metadata.sourceFileId,\n        Boolean(sample.metadata.userFileInfo)\n      );\n      if (cancelled) return;\n      setSourceAudioBuffer([sample.metadata.sourceFileId, audioBuffer]);\n    })();\n    return () => {\n      cancelled = true;\n    };\n  }, [sample.metadata.sourceFileId, sample.metadata.userFileInfo]);\n\n  // We need to hold onto an internal state because when the sample changes,\n  // the sourceAudioBuffer loads asynchronously and we want to avoid trying\n  // to apply the new sample's metadata to the old sample's audio.\n  const displayedSample = useRef(sample);\n  if (\n    loadedAudioBuffer &&\n    sample.metadata.sourceFileId === loadedAudioBuffer[0]\n  ) {\n    displayedSample.current = sample;\n  }\n\n  return (\n    <WaveformEdit\n      {...rest}\n      sample={displayedSample.current}\n      sourceAudioBuffer={loadedAudioBuffer && loadedAudioBuffer[1]}\n    />\n  );\n}\n\nexport default AsyncWaveformEdit;\n","/**\n * @typedef {{\n *   prepareSampleBufferFromWavData(\n *     wavData: Uint8Array,\n *     bytes: number,\n *     slotNumber: number,\n *     quality: number,\n *     useCompression: 0 | 1,\n *     onUpdate: number\n *   ): number;\n *   prepareSampleBufferFrom16BitPcmData(\n *     wavData: Uint8Array,\n *     bytes: number,\n *     rate: number,\n *     slotNumber: number,\n *     quality: number,\n *     useCompression: 0 | 1,\n *     onUpdate: number\n *   ): number;\n *   getSampleBufferChunkPointer(sampleBufferUpdate: number): number;\n *   getSampleBufferChunkSize(sampleBufferUpdate: number): number;\n *   getSampleBufferProgress(sampleBufferUpdate: number): number;\n *   getSampleBufferTotalSize(sampleBufferUpdate: number): number;\n *   cancelSampleBufferWork(workHandle: number): void;\n *   registerUpdateCallback(\n *     cb: (sampleBufferContainer: number) => void\n *   ): number;\n *   unregisterUpdateCallback(pointer: number): void;\n *   heap8Buffer(): ArrayBuffer;\n * }} SyroBindings\n */\n\n/**\n * @type {Promise<SyroBindings> | undefined}\n */\nlet syroBindingsPromise;\n\nexport async function getSyroBindings() {\n  if (typeof window.CREATE_SYRO_BINDINGS !== 'function') {\n    return Promise.reject(\n      'Expected CREATE_SYRO_BINDINGS global function to exist'\n    );\n  }\n  const Module = await window.CREATE_SYRO_BINDINGS();\n  return (syroBindingsPromise =\n    syroBindingsPromise ||\n    new Promise((resolve, reject) => {\n      /**\n       * @type {SyroBindings}\n       */\n      let syroBindings;\n      try {\n        syroBindings = {\n          prepareSampleBufferFromWavData: Module.cwrap(\n            'prepareSampleBufferFromWavData',\n            'number',\n            ['array', 'number', 'number', 'number', 'number']\n          ),\n          // TODO: put this back when C function works correctly\n          // prepareSampleBufferFrom16BitPcmData: Module.cwrap(\n          //   'prepareSampleBufferFrom16BitPcmData',\n          //   'number',\n          //   ['array', 'number', 'number', 'number', 'number', 'number']\n          // ),\n          prepareSampleBufferFrom16BitPcmData() {\n            throw new Error(\n              'This function does not work. Use prepareSampleBufferFromWavData.'\n            );\n          },\n          getSampleBufferChunkPointer: Module.cwrap(\n            'getSampleBufferChunkPointer',\n            'number',\n            ['number']\n          ),\n          getSampleBufferChunkSize: Module.cwrap(\n            'getSampleBufferChunkSize',\n            'number',\n            ['number']\n          ),\n          getSampleBufferProgress: Module.cwrap(\n            'getSampleBufferProgress',\n            'number',\n            ['number']\n          ),\n          getSampleBufferTotalSize: Module.cwrap(\n            'getSampleBufferTotalSize',\n            'number',\n            ['number']\n          ),\n          cancelSampleBufferWork: Module.cwrap('cancelSampleBufferWork', null, [\n            'number',\n          ]),\n          registerUpdateCallback(cb) {\n            return Module.addFunction(cb, 'vi');\n          },\n          unregisterUpdateCallback(pointer) {\n            Module.removeFunction(pointer);\n          },\n          heap8Buffer() {\n            return Module.HEAP8.buffer;\n          },\n        };\n      } catch (err) {\n        reject(err);\n        return;\n      }\n      resolve(syroBindings);\n    }));\n}\n","import { getSyroBindings } from './getSyroBindings.js';\nimport { getTargetWavForSample } from './audioData.js';\n\n/**\n * @param {import('../store').SampleContainer} sampleContainer\n * @param {(progress: number) => void} onProgress\n * @returns {{\n *   sampleBufferPromise: Promise<Uint8Array>;\n *   cancelWork: () => void;\n * }}\n */\nexport function getSampleBuffer(sampleContainer, onProgress) {\n  let cancelled = false;\n  let onCancel = () => {};\n  return {\n    cancelWork() {\n      cancelled = true;\n      onCancel();\n    },\n    sampleBufferPromise: (async () => {\n      const {\n        prepareSampleBufferFromWavData,\n        getSampleBufferChunkPointer,\n        getSampleBufferChunkSize,\n        getSampleBufferProgress,\n        getSampleBufferTotalSize,\n        cancelSampleBufferWork,\n        registerUpdateCallback,\n        unregisterUpdateCallback,\n        heap8Buffer,\n      } = await getSyroBindings();\n      if (cancelled) {\n        return new Uint8Array();\n      }\n      const { data } = await getTargetWavForSample(sampleContainer);\n      if (cancelled) {\n        return new Uint8Array();\n      }\n      /**\n       * @type {Uint8Array | undefined}\n       */\n      let sampleBuffer;\n      let progress = 0;\n      const onUpdate = registerUpdateCallback((sampleBufferUpdatePointer) => {\n        if (cancelled) {\n          return;\n        }\n        const totalSize = getSampleBufferTotalSize(sampleBufferUpdatePointer);\n        if (!sampleBuffer) {\n          sampleBuffer = new Uint8Array(totalSize);\n        }\n        const chunkPointer = getSampleBufferChunkPointer(\n          sampleBufferUpdatePointer\n        );\n        const chunkSize = getSampleBufferChunkSize(sampleBufferUpdatePointer);\n        const bytesProgress = getSampleBufferProgress(\n          sampleBufferUpdatePointer\n        );\n        // save a new copy of the data so it doesn't disappear\n        sampleBuffer.set(\n          new Uint8Array(heap8Buffer(), chunkPointer, chunkSize),\n          bytesProgress - chunkSize\n        );\n        progress = bytesProgress / totalSize;\n      });\n      const workHandle = prepareSampleBufferFromWavData(\n        data,\n        data.length,\n        sampleContainer.metadata.slotNumber,\n        sampleContainer.metadata.qualityBitDepth,\n        sampleContainer.metadata.useCompression ? 1 : 0,\n        onUpdate\n      );\n      onProgress(progress);\n      try {\n        await /** @type {Promise<void>} */ (\n          new Promise((resolve) => {\n            /**\n             * @type {number}\n             */\n            let frame;\n            onCancel = () => {\n              cancelAnimationFrame(frame);\n              cancelSampleBufferWork(workHandle);\n              resolve();\n            };\n            checkProgress();\n            function checkProgress() {\n              // TODO: find a way to detect if the web worker failed to load, in\n              // which case we should reject the promise\n              if (progress) {\n                onProgress(progress);\n                if (progress >= 1) {\n                  resolve();\n                  return;\n                }\n              }\n              frame = requestAnimationFrame(checkProgress);\n            }\n          })\n        );\n      } finally {\n        onCancel = () => {};\n        unregisterUpdateCallback(onUpdate);\n      }\n      if (cancelled) {\n        return new Uint8Array();\n      }\n      if (!sampleBuffer) {\n        throw new Error('Unexpected condition: sampleBuffer should be defined');\n      }\n      return sampleBuffer;\n    })(),\n  };\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { Button, ProgressBar } from 'react-bootstrap';\n\nimport {\n  getAudioBufferForAudioFileData,\n  useAudioPlaybackContext,\n} from './utils/audioData.js';\nimport { getSampleBuffer } from './utils/syro.js';\n\n/**\n * @param {{\n *   sample: import('./store').SampleContainer;\n * }} props\n */\nfunction VolcaTransferControl({ sample }) {\n  const [syroProgress, setSyroProgress] = useState(0);\n  const [syroTransferState, setSyroTransferState] = useState(\n    /** @type {'idle' | 'transferring' | 'error'} */ ('idle')\n  );\n  const [syroAudioBuffer, setSyroAudioBuffer] = useState(\n    /** @type {AudioBuffer | Error | null} */ (null)\n  );\n  const [callbackOnSyroBuffer, setCallbackOnSyroBuffer] = useState(\n    /** @type {{ fn: () => void } | null} */ (null)\n  );\n  useEffect(() => {\n    if (syroAudioBuffer instanceof AudioBuffer && callbackOnSyroBuffer) {\n      setCallbackOnSyroBuffer(null);\n      callbackOnSyroBuffer.fn();\n    }\n  }, [syroAudioBuffer, callbackOnSyroBuffer]);\n  // to be set when transfer or playback is started\n  const stop = useRef(() => {});\n  useEffect(() => {\n    let cancelled = false;\n    setSyroProgress(0);\n    setSyroTransferState('idle');\n    setSyroAudioBuffer(null);\n    setCallbackOnSyroBuffer(null);\n    stop.current = () => {\n      cancelled = true;\n    };\n    try {\n      const { sampleBufferPromise, cancelWork } = getSampleBuffer(\n        sample,\n        (progress) => {\n          if (!cancelled) {\n            setSyroProgress(progress);\n          }\n        }\n      );\n      stop.current = () => {\n        cancelWork();\n        cancelled = true;\n      };\n      sampleBufferPromise.then(async (sampleBuffer) => {\n        if (cancelled) {\n          return;\n        }\n        stop.current = () => {\n          cancelled = true;\n        };\n        const audioBuffer = await getAudioBufferForAudioFileData(sampleBuffer);\n        if (!cancelled) {\n          setSyroAudioBuffer(audioBuffer);\n        }\n      });\n    } catch (err) {\n      console.error(err);\n      setSyroAudioBuffer(new Error(String(err)));\n    }\n    return () => stop.current();\n  }, [sample]);\n  const { playAudioBuffer, isAudioBusy } = useAudioPlaybackContext();\n  return (\n    <>\n      <Button\n        type=\"button\"\n        variant=\"primary\"\n        onClick={(e) => {\n          if (!(syroAudioBuffer instanceof AudioBuffer)) {\n            if (!syroAudioBuffer) {\n              const button = e.currentTarget;\n              // wait until the syro buffer is ready then simulate a click event\n              // to retry this handler. it's important that we simulate another\n              // click because otherwise iOS won't let us play the audio later.\n              setCallbackOnSyroBuffer({ fn: () => button.click() });\n            }\n            return;\n          }\n          try {\n            setSyroTransferState('transferring');\n            const stopPlayback = playAudioBuffer(syroAudioBuffer, {\n              onTimeUpdate: (currentTime) =>\n                setSyroProgress(currentTime / syroAudioBuffer.duration),\n              onEnded: () => setSyroTransferState('idle'),\n            });\n            stop.current = () => {\n              stopPlayback();\n              setSyroTransferState('idle');\n            };\n          } catch (err) {\n            console.error(err);\n            setSyroTransferState('error');\n          }\n        }}\n        disabled={\n          isAudioBusy ||\n          syroAudioBuffer instanceof Error ||\n          syroTransferState === 'transferring'\n        }\n      >\n        Transfer to volca sample\n      </Button>\n      <br />\n      {syroAudioBuffer &&\n      syroTransferState === 'idle' ? null : syroTransferState === 'error' ? (\n        'Error transferring'\n      ) : (\n        <>\n          <p>\n            {!syroAudioBuffer\n              ? 'Preparing sample for transfer...'\n              : syroAudioBuffer instanceof AudioBuffer\n              ? 'Transferring to Volca Sample...'\n              : 'Error preparing sample for transfer'}\n          </p>\n          <ProgressBar now={100 * syroProgress} />\n          <br />\n          <Button type=\"button\" variant=\"light\" onClick={() => stop.current()}>\n            Cancel\n          </Button>\n        </>\n      )}\n      <br />\n    </>\n  );\n}\n\nexport default VolcaTransferControl;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { styled } from 'tonami';\n\nimport WaveformEdit from './WaveformEdit.js';\nimport {\n  getTargetWavForSample,\n  getAudioBufferForAudioFileData,\n  useAudioPlaybackContext,\n} from './utils/audioData.js';\nimport { SampleContainer } from './store.js';\nimport VolcaTransferControl from './VolcaTransferControl.js';\nimport {\n  Container,\n  Dropdown,\n  DropdownButton,\n  Button,\n  Form,\n} from 'react-bootstrap';\n\nconst WaveformContainer = styled.div({\n  height: '200px',\n  maxWidth: '400px',\n});\n\n/**\n * @param {Blob} blob\n * @param {string} filename\n */\nfunction downloadBlob(blob, filename) {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.style.display = 'none';\n  document.body.appendChild(a);\n  a.click();\n  a.remove();\n  URL.revokeObjectURL(url);\n}\n\n/**\n * @param {{\n *   sample: import('./store').SampleContainer | null;\n *   onSampleUpdate: (id: string, update: import('./store').SampleMetadataUpdateArg) => void;\n *   onSampleDuplicate: (id: string) => void;\n *   onSampleDelete: (id: string) => void;\n * }} props\n */\nfunction SampleDetail({\n  sample,\n  onSampleUpdate,\n  onSampleDuplicate,\n  onSampleDelete,\n}) {\n  const sampleId = sample && sample.id;\n  /**\n   * @type {(scaleCoefficient: number) => void}\n   */\n  const handleSetScaleCoefficient = useCallback(\n    (scaleCoefficient) =>\n      sampleId && onSampleUpdate(sampleId, { scaleCoefficient }),\n    [sampleId, onSampleUpdate]\n  );\n  /**\n   * @type {(updateTrimFrames: (old: [number, number]) => [number, number]) => void}\n   */\n  const handleSetTrimFrames = useCallback(\n    (updateTrimFrames) =>\n      sampleId &&\n      onSampleUpdate(sampleId, (metadata) => ({\n        ...metadata,\n        trim: {\n          ...metadata.trim,\n          frames: updateTrimFrames(metadata.trim.frames),\n        },\n      })),\n    [sampleId, onSampleUpdate]\n  );\n  const [targetWav, setTargetWav] = useState(\n    /** @type {Uint8Array | null} */ (null)\n  );\n  const [audioBufferForAudioFileData, setAudioBufferForAudioFileData] =\n    useState(/** @type {AudioBuffer | null} */ (null));\n  const [callbackOnAudioBuffer, setCallbackOnAudioBuffer] = useState(\n    /** @type {{ fn: () => void } | null} */ (null)\n  );\n  useEffect(() => {\n    if (audioBufferForAudioFileData instanceof AudioBuffer && callbackOnAudioBuffer) {\n      setCallbackOnAudioBuffer(null);\n      callbackOnAudioBuffer.fn();\n    }\n  }, [audioBufferForAudioFileData, callbackOnAudioBuffer]);\n  useEffect(() => {\n    setTargetWav(null);\n    setCallbackOnAudioBuffer(null);\n    if (sample) {\n      let cancelled = false;\n      getTargetWavForSample(sample).then(({ data }) => {\n        if (!cancelled) {\n          setTargetWav(data);\n        }\n      });\n    }\n  }, [sample]);\n  useEffect(() => {\n    setAudioBufferForAudioFileData(null);\n    if (targetWav) {\n      let cancelled = false;\n      getAudioBufferForAudioFileData(targetWav).then((audioBuffer) => {\n        if (!cancelled) {\n          setAudioBufferForAudioFileData(audioBuffer);\n        }\n      });\n    }\n  }, [targetWav]);\n  const { playAudioBuffer, isAudioBusy } = useAudioPlaybackContext();\n  // to be set when playback is started\n  const stopPreviewPlayback = useRef(() => {});\n  useEffect(() => {\n    return () => stopPreviewPlayback.current();\n  }, [sample]);\n  if (!sample) {\n    return null;\n  }\n  return (\n    <Container fluid=\"sm\">\n      <h2>\n        {sample.metadata.name}\n        <DropdownButton\n          style={{ display: 'inline-block', float: 'right' }}\n          variant=\"light\"\n          align=\"end\"\n          title=\"options\"\n        >\n          <Dropdown.Item\n            onClick={() => {\n              const newName = prompt(\n                `Choose a new name for the sample \"${sample.metadata.name}\":`,\n                sample.metadata.name\n              );\n              const newNameTrimmed = newName && newName.trim();\n              if (newNameTrimmed) {\n                onSampleUpdate(sample.id, { name: newNameTrimmed });\n              }\n            }}\n          >\n            Rename\n          </Dropdown.Item>\n          <Dropdown.Item onClick={() => onSampleDuplicate(sample.id)}>\n            Duplicate\n          </Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item\n            onClick={() => {\n              if (\n                window.confirm(\n                  `Are you sure you want to delete ${sample.metadata.name}?`\n                )\n              ) {\n                onSampleDelete(sample.id);\n              }\n            }}\n          >\n            Delete\n          </Dropdown.Item>\n        </DropdownButton>\n      </h2>\n      <p>\n        <strong>Sampled:</strong>{' '}\n        {new Date(sample.metadata.dateSampled).toLocaleString()}\n        <br />\n        <strong>Updated:</strong>{' '}\n        {new Date(sample.metadata.dateModified).toLocaleString()}\n      </p>\n      <br />\n      <br />\n      <WaveformContainer>\n        <WaveformEdit\n          onSetTrimFrames={handleSetTrimFrames}\n          onSetScaleCoefficient={handleSetScaleCoefficient}\n          sample={sample}\n        />\n      </WaveformContainer>\n      <br />\n      <br />\n      <Button\n        type=\"button\"\n        variant=\"secondary\"\n        size=\"sm\"\n        onClick={(e) => {\n          if (audioBufferForAudioFileData) {\n            stopPreviewPlayback.current = playAudioBuffer(\n              audioBufferForAudioFileData\n            );\n          } else {\n            const button = e.currentTarget;\n            // wait until the audio buffer is ready then simulate a click event\n            // to retry this handler. it's important that we simulate another\n            // click because otherwise iOS won't let us play the audio later.\n            setCallbackOnAudioBuffer({ fn: () => button.click() });\n          }\n        }}\n        disabled={isAudioBusy}\n      >\n        Play audio preview\n      </Button>\n      {/* {' '}\n      <Button\n        type=\"button\"\n        variant=\"secondary\"\n        onClick={async () => {\n          if (targetWav) {\n            const blob = new Blob([targetWav], {\n              type: 'audio/x-wav',\n            });\n            downloadBlob(blob, `${sample.metadata.name}.wav`);\n          }\n        }}\n        disabled={!targetWav}\n      >\n        Download preview audio\n      </Button> */}{' '}\n      <Button\n        type=\"button\"\n        variant=\"secondary\"\n        size=\"sm\"\n        onClick={async () => {\n          const { sourceFileId, userFileInfo } = sample.metadata;\n          const data = await SampleContainer.getSourceFileData(sourceFileId);\n          const blob = new Blob([data], {\n            type: userFileInfo ? userFileInfo.type : 'audio/x-wav',\n          });\n          downloadBlob(\n            blob,\n            `${sample.metadata.name}${userFileInfo ? userFileInfo.ext : '.wav'}`\n          );\n        }}\n      >\n        Download original file\n      </Button>\n      <br />\n      <br />\n      <Form.Group>\n        <Form.Label>\n          Quality bit depth ({sample.metadata.qualityBitDepth})\n        </Form.Label>\n        <Form.Range\n          value={sample.metadata.qualityBitDepth}\n          step={1}\n          min={8}\n          max={16}\n          onChange={(e) => {\n            const qualityBitDepth = Number(e.target.value);\n            onSampleUpdate(sample.id, { qualityBitDepth });\n          }}\n        />\n      </Form.Group>\n      <Form.Group>\n        <Form.Label>Slot number</Form.Label>\n        <Form.Control\n          type=\"number\"\n          value={sample.metadata.slotNumber}\n          step={1}\n          min={0}\n          max={99}\n          onChange={(e) => {\n            const slotNumber = Number(e.target.value);\n            onSampleUpdate(sample.id, { slotNumber });\n          }}\n        />\n      </Form.Group>\n      <br />\n      <VolcaTransferControl sample={sample} />\n    </Container>\n  );\n}\n\nexport default SampleDetail;\n","import getWavFileHeaders from 'wav-headers';\n\nimport {\n  clampOutOfBoundsValues,\n  convertFloatSamplesToPcm,\n  getAudioContextConstructor,\n  interleaveSampleChannels,\n} from './audioData.js';\nimport { SAMPLE_RATE } from './constants.js';\n\n/**\n * @type {AudioContext | undefined}\n */\nlet recordingAudioContext;\n\nfunction getRecordingAudioContext() {\n  const AudioContext = getAudioContextConstructor();\n  return (recordingAudioContext =\n    recordingAudioContext ||\n    new AudioContext(\n      navigator.mediaDevices.getSupportedConstraints().sampleRate\n        ? { sampleRate: SAMPLE_RATE }\n        : {}\n    ));\n}\n\n/**\n * @typedef {{ device: { deviceId: string; label: string }; channelsAvailable: number }} AudioDeviceInfoContainer\n */\n\n/**\n * @returns {Promise<AudioDeviceInfoContainer[]>}\n */\nexport async function getAudioInputDevices() {\n  {\n    // request dummy stream first on the first available input device. this is\n    // because some platforms (like iOS) don't allow any kind of device\n    // inspection until access has been given to a media stream.\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false,\n    });\n    for (const track of stream.getTracks()) {\n      track.stop();\n    }\n  }\n  const devices = await navigator.mediaDevices.enumerateDevices();\n  const audioInputDevices = devices.filter(\n    (device) => device.kind === 'audioinput'\n  );\n  /**\n   * @type {AudioDeviceInfoContainer[]}\n   */\n  const infoContainers = [];\n  for (const device of audioInputDevices) {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      // try to grab stereo audio\n      audio: { deviceId: device.deviceId, channelCount: 2 },\n      video: false,\n    });\n    // for Firefox, which requires us to check this info after\n    // permissions have been granted\n    const realLabel = /** @type {MediaDeviceInfo} */ (\n      (await navigator.mediaDevices.enumerateDevices()).find(\n        ({ deviceId }) => device.deviceId === deviceId\n      )\n    ).label;\n    let channelsAvailable = 1;\n    {\n      const track = stream.getAudioTracks()[0];\n      // not widely available yet according to MDN.. but at least\n      // seems to work with all the latest versions of each browser\n      const channelCountSetting =\n        /** @type {MediaTrackSettings & { channelCount: number }} */ (\n          track.getSettings()\n        ).channelCount;\n      if (channelCountSetting) {\n        channelsAvailable = channelCountSetting;\n      } else if (track.getCapabilities) {\n        // we'll try this as backup if it exists since the API is older, but\n        // also not supported by Firefox\n        channelsAvailable =\n          (track.getCapabilities().channelCount || {}).max || channelsAvailable;\n      }\n    }\n    for (const track of stream.getTracks()) {\n      track.stop();\n    }\n    infoContainers.push({\n      device: { deviceId: device.deviceId, label: realLabel },\n      channelsAvailable,\n    });\n  }\n  return infoContainers;\n}\n\n/**\n * @typedef {Omit<AudioWorkletNode, 'parameters'> & {\n *   parameters: Map<'isRecording' | 'bufferSize', AudioParam>\n * }} TAudioWorkletNode\n */\n\n/**\n * @typedef {{\n *  channelCount: number;\n *  onData: (audioChannels: Float32Array[]) => void;\n *  onFinish: () => void;\n * }} PcmRecorderNodeOptions\n */\n\n/**\n * @type {Promise<void> | undefined}\n */\nlet recorderWorkletProcessorPromise;\n/**\n * @param {PcmRecorderNodeOptions} options\n * @returns {Promise<{ recorderNode: TAudioWorkletNode; stop: () => void }>}\n */\nasync function createAudioWorkletPcmRecorderNode({ onData, onFinish }) {\n  const audioContext = getRecordingAudioContext();\n  recorderWorkletProcessorPromise =\n    recorderWorkletProcessorPromise ||\n    audioContext.audioWorklet.addModule('recorderWorkletProcessor.js');\n  await recorderWorkletProcessorPromise;\n  const recorderNode = /** @type {TAudioWorkletNode} */ (\n    new AudioWorkletNode(audioContext, 'recorder-worklet', {\n      parameterData: {\n        bufferSize: 1024,\n      },\n    })\n  );\n  recorderNode.port.onmessage = (e) => {\n    if (e.data.eventType === 'data') {\n      /**\n       * @type {Float32Array[]}\n       */\n      const audioChannels = e.data.audioChannels;\n      onData(audioChannels);\n    }\n\n    if (e.data.eventType === 'stop') {\n      onFinish();\n    }\n  };\n  const isRecordingParam = /** @type {AudioParam} */ (\n    recorderNode.parameters.get('isRecording')\n  );\n  isRecordingParam.setValueAtTime(1, audioContext.currentTime);\n  return {\n    recorderNode,\n    stop() {\n      isRecordingParam.setValueAtTime(0, audioContext.currentTime);\n    },\n  };\n}\n\n/**\n * @param {PcmRecorderNodeOptions} options\n * @returns {{ recorderNode: ScriptProcessorNode; stop: () => void }}\n */\nfunction createScriptProcessorPcmRecorderNode({\n  channelCount,\n  onData,\n  onFinish,\n}) {\n  const audioContext = getRecordingAudioContext();\n  const recorderNode = audioContext.createScriptProcessor(\n    1024,\n    channelCount,\n    channelCount\n  );\n  // to be set by user if they want to stop recording before time limit reached\n  let stopped = false;\n  recorderNode.onaudioprocess = (e) => {\n    const audioChannels = /** @type {void[]} */ (Array(channelCount))\n      .fill()\n      .map((_, i) => e.inputBuffer.getChannelData(i));\n    onData(audioChannels);\n    if (stopped) {\n      onFinish();\n    }\n  };\n  return {\n    recorderNode,\n    stop() {\n      stopped = true;\n    },\n  };\n}\n\n/**\n * @param {PcmRecorderNodeOptions} options\n * @returns {Promise<{ recorderNode: AudioNode; stop: () => void }>}\n */\nasync function createPcmRecorderNode(options) {\n  if (typeof AudioWorkletNode === 'undefined') {\n    return createScriptProcessorPcmRecorderNode(options);\n  }\n  return await createAudioWorkletPcmRecorderNode(options);\n}\n\n/**\n * @param {{\n *   deviceId: string;\n *   channelCount: number;\n *   onStart: (maxSamples: number) => void;\n *   onUpdate: (floatChunksByChannel: Float32Array[]) => void;\n * }} options\n * @returns {Promise<{ mediaRecording: Promise<Uint8Array>; stop: () => void }>}\n */\nexport async function captureAudio({\n  deviceId,\n  channelCount,\n  onStart,\n  onUpdate,\n}) {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    // TODO: support more recording configuration options\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#properties_of_audio_tracks\n    // autoGainControl, echoCancellation, latency, noiseSuppression, volume\n    audio: {\n      deviceId,\n      channelCount,\n      sampleRate: SAMPLE_RATE,\n      echoCancellation: false,\n      // TODO: add advanced controls for these options\n      // @ts-ignore (should be in type)\n      autoGainControl: false,\n      noiseSuppression: false,\n    },\n    video: false,\n  });\n  const audioContext = getRecordingAudioContext();\n  const mediaStreamSourceNode = audioContext.createMediaStreamSource(stream);\n  const { recorderNode, stop } = await createPcmRecorderNode({\n    channelCount,\n    onData,\n    onFinish,\n  });\n  mediaStreamSourceNode.connect(recorderNode);\n  recorderNode.connect(audioContext.destination);\n  const timeLimitSeconds = 10;\n  const maxSamples = timeLimitSeconds * audioContext.sampleRate;\n  onStart(maxSamples);\n\n  let samplesRecorded = 0;\n  /**\n   * @type {Int32Array[]}\n   */\n  const recordedChunks = Array(channelCount).fill([]);\n\n  /**\n   * @param {Float32Array[]} audioChannels\n   */\n  function onData(audioChannels) {\n    /**\n     * @type {number}\n     */\n    let sampleCount = 0;\n    /**\n     * @type {Float32Array[]}\n     */\n    const floatChunksByChannel = [];\n    for (let channel = 0; channel < channelCount; channel++) {\n      const chunk = audioChannels[channel];\n      const chunkSize = chunk.length;\n      const chunkSliced = chunk.slice(\n        0,\n        Math.min(chunkSize, maxSamples - samplesRecorded)\n      );\n      clampOutOfBoundsValues(chunkSliced);\n      if (!sampleCount) {\n        sampleCount = chunkSliced.length;\n      }\n      floatChunksByChannel.push(chunkSliced);\n    }\n    const interleaved = interleaveSampleChannels(floatChunksByChannel);\n    const interleavedPcm = convertFloatSamplesToPcm(interleaved, 32);\n    recordedChunks.push(interleavedPcm);\n    samplesRecorded += sampleCount;\n    // should never be >, but just in case we did something wrong we use >=\n    if (samplesRecorded >= maxSamples) {\n      stop();\n    }\n    onUpdate(floatChunksByChannel);\n  }\n\n  /**\n   * @type {(wavBuffer: Uint8Array) => void}\n   */\n  let onDone;\n  /**\n   * @type {(error: unknown) => void}\n   */\n  let onError;\n  /**\n   * @type {Promise<Uint8Array>}\n   */\n  const mediaRecording = new Promise((resolve, reject) => {\n    onDone = resolve;\n    onError = reject;\n  });\n  let finished = false;\n\n  async function onFinish() {\n    if (finished) {\n      return;\n    }\n\n    // create wav file\n    try {\n      const blob = new Blob(recordedChunks);\n      const arrayBuffer = await blob.arrayBuffer();\n      const wavHeader = getWavFileHeaders({\n        channels: channelCount,\n        sampleRate: audioContext.sampleRate,\n        bitDepth: 32,\n        dataLength: arrayBuffer.byteLength,\n      });\n      const wavBuffer = new Uint8Array(\n        wavHeader.length + arrayBuffer.byteLength\n      );\n      wavBuffer.set(wavHeader);\n      wavBuffer.set(new Uint8Array(arrayBuffer), wavHeader.length);\n      onDone(wavBuffer);\n    } catch (err) {\n      onError(err);\n    }\n\n    // clean up\n    const tracks = stream.getTracks();\n    for (const track of tracks) {\n      track.stop();\n    }\n    recorderNode.disconnect(audioContext.destination);\n    mediaStreamSourceNode.disconnect(recorderNode);\n    finished = true;\n  }\n\n  return {\n    stop,\n    mediaRecording,\n  };\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Form, Button, Collapse } from 'react-bootstrap';\n\nimport {\n  findSamplePeak,\n  getAudioBufferForAudioFileData,\n} from './utils/audioData.js';\nimport { captureAudio, getAudioInputDevices } from './utils/recording.js';\n\nimport classes from './SampleRecord.module.scss';\n\nconst captureDevicePreferenceKey = 'capture_device_preference';\n\n/**\n * @typedef {{ deviceId: string; channelCount: number }} CaptureDevicePreference\n */\n\n/**\n * @type {Map<string, import('./utils/recording').AudioDeviceInfoContainer> | null}\n */\nlet cachedCaptureDevices = null;\n\n/**\n * @typedef {(audioFileBuffer: Uint8Array, userFile?: File) => void} RecordingCallback\n */\n\n/**\n * @param {(channels: Float32Array[]) => void} onRecordUpdate\n * @param {RecordingCallback} onRecordFinish\n */\nfunction useMediaRecording(onRecordUpdate, onRecordFinish) {\n  const restoringCaptureDevice = useRef(\n    /** @type {CaptureDevicePreference | null} */ (\n      JSON.parse(localStorage.getItem(captureDevicePreferenceKey) || 'null')\n    )\n  );\n  const [captureDevices, setCaptureDevices] = useState(cachedCaptureDevices);\n  const [accessState, setAccessState] = useState(\n    /** @type {'pending' | 'ok' | 'denied' | 'unavailable'} */ (\n      captureDevices ? 'ok' : 'pending'\n    )\n  );\n  const [selectedCaptureDeviceId, setSelectedCaptureDeviceId] = useState('');\n  useEffect(() => {\n    cachedCaptureDevices = captureDevices;\n    setAccessState('ok');\n  }, [captureDevices]);\n  const refreshCaptureDevices = useCallback(() => {\n    let cancelled = false;\n    getAudioInputDevices()\n      .then((devices) => {\n        if (cancelled) {\n          return;\n        }\n        if (devices.length) {\n          setCaptureDevices(\n            new Map(devices.map((d) => [d.device.deviceId, d]))\n          );\n          setSelectedCaptureDeviceId((id) => {\n            if (id) {\n              restoringCaptureDevice.current = null;\n              return id;\n            }\n            if (\n              restoringCaptureDevice.current &&\n              devices.find(\n                ({ device }) =>\n                  /** @type {NonNullable<CaptureDevicePreference>} */ (\n                    restoringCaptureDevice.current\n                  ).deviceId === device.deviceId\n              )\n            ) {\n              return restoringCaptureDevice.current.deviceId;\n            }\n            restoringCaptureDevice.current = null;\n            return devices[0].device.deviceId;\n          });\n        }\n      })\n      .catch((err) => {\n        if (cancelled) {\n          return;\n        }\n        if (err instanceof DOMException) {\n          if (err.name === 'NotAllowedError') {\n            setAccessState('denied');\n            return;\n          }\n          if (err.name === 'NotFoundError') {\n            setAccessState('unavailable');\n            return;\n          }\n        }\n        throw err;\n      });\n    return () => {\n      cancelled = true;\n    };\n  }, []);\n  useEffect(refreshCaptureDevices, [refreshCaptureDevices]);\n  const [selectedChannelCount, setSelectedChannelCount] = useState(1);\n  useEffect(() => {\n    const selectedDeviceInfo =\n      captureDevices && captureDevices.get(selectedCaptureDeviceId);\n    if (selectedDeviceInfo) {\n      if (\n        restoringCaptureDevice.current &&\n        restoringCaptureDevice.current.deviceId ===\n          selectedDeviceInfo.device.deviceId &&\n        restoringCaptureDevice.current.channelCount <=\n          selectedDeviceInfo.channelsAvailable\n      ) {\n        setSelectedChannelCount(restoringCaptureDevice.current.channelCount);\n      } else {\n        setSelectedChannelCount(selectedDeviceInfo.channelsAvailable);\n      }\n      restoringCaptureDevice.current = null;\n    }\n  }, [captureDevices, selectedCaptureDeviceId]);\n  useEffect(() => {\n    if (selectedCaptureDeviceId) {\n      localStorage.setItem(\n        captureDevicePreferenceKey,\n        JSON.stringify({\n          deviceId: selectedCaptureDeviceId,\n          channelCount: selectedChannelCount,\n        })\n      );\n    }\n  }, [selectedCaptureDeviceId, selectedChannelCount]);\n  /**\n   * @typedef {'ready' | 'capturing' | 'finalizing' | 'error'} CaptureState\n   */\n  const [captureState, setCaptureState] = useState(\n    /** @type {CaptureState} */ ('ready')\n  );\n  const [recordingError, setRecordingError] = useState(\n    /** @type {unknown} */ (null)\n  );\n  // to be set when recording is started\n  const [stop, setStop] = useState({\n    /**\n     * @param {boolean} [cancel]\n     */\n    fn(cancel) {},\n  });\n  const [maxSamples, setMaxSamples] = useState(0);\n  const handleBeginRecording = useCallback(async () => {\n    let cancelled = false;\n    const { mediaRecording, stop } = await captureAudio({\n      deviceId: selectedCaptureDeviceId,\n      channelCount: selectedChannelCount,\n      onStart: (maxSamples) => {\n        setMaxSamples(maxSamples);\n        setCaptureState('capturing');\n      },\n      onUpdate: onRecordUpdate,\n    });\n    setStop({\n      fn(cancel) {\n        stop();\n        if (cancel) {\n          cancelled = true;\n        }\n      },\n    });\n    /**\n     * @type {Uint8Array}\n     */\n    let wavBuffer;\n    try {\n      wavBuffer = await mediaRecording;\n    } catch (err) {\n      setRecordingError(err);\n      setCaptureState('error');\n      return;\n    }\n    if (cancelled) {\n      setCaptureState('ready');\n    } else {\n      setCaptureState('finalizing');\n      onRecordFinish(wavBuffer);\n    }\n  }, [\n    selectedCaptureDeviceId,\n    selectedChannelCount,\n    onRecordUpdate,\n    onRecordFinish,\n  ]);\n  return {\n    captureDevices,\n    accessState,\n    selectedCaptureDeviceId,\n    selectedChannelCount,\n    captureState,\n    recordingError,\n    maxSamples,\n    refreshCaptureDevices,\n    setSelectedCaptureDeviceId,\n    setSelectedChannelCount,\n    beginRecording: handleBeginRecording,\n    stopRecording: stop.fn,\n  };\n}\n\nconst groupPixelWidth = 2;\n\n/**\n * @param {{\n *   canvas: HTMLCanvasElement;\n *   peaks: Float32Array;\n *   peakOffset: number;\n *   scaleCoefficient: number;\n * }} opts\n */\nfunction drawRecordingPeaks({ canvas, peaks, peakOffset, scaleCoefficient }) {\n  const barColor = '#fff';\n  const ctx = /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\n  ctx.imageSmoothingEnabled = false;\n  const { height } = canvas;\n  ctx.fillStyle = barColor;\n  for (let i = peakOffset; i < peaks.length; i++) {\n    const peak = peaks[i];\n    if (peak === 0) {\n      continue;\n    }\n    const basePeakHeight = height * peak; // float\n    // make the bar always at least 1px tall to avoid empty sections\n    const scaledPeakHeight = Math.max(\n      Math.round(scaleCoefficient * basePeakHeight),\n      1\n    );\n    ctx.fillRect(\n      i * groupPixelWidth,\n      height - scaledPeakHeight,\n      groupPixelWidth - 1,\n      scaledPeakHeight\n    );\n  }\n}\n\n/**\n * @param {{ onRecordFinish: RecordingCallback }} props\n */\nfunction SampleRecord({ onRecordFinish }) {\n  /**\n   * @type {React.RefObject<HTMLCanvasElement>}\n   */\n  const recordButtonCanvasRef = useRef(null);\n\n  const groupSizeRef = useRef(0);\n  const peaksRef = useRef(new Float32Array());\n  const peakOffsetRef = useRef(0);\n  // each item in the queue is an array of channel chunks,\n  // each channel chunk being a Float32Array\n  const updatesQueueRef = useRef(/** @type {Float32Array[][]} */ ([]));\n\n  /**\n   * @type {(channels: Float32Array[]) => Promise<void>}\n   */\n  const onRecordUpdate = useCallback(async (channels) => {\n    const groupSize = groupSizeRef.current;\n    const peaks = peaksRef.current;\n    const updatesQueue = updatesQueueRef.current;\n\n    updatesQueue.push(channels);\n\n    const queuedSampleCount = updatesQueue.reduce(\n      (c, [{ length }]) => c + length,\n      0\n    );\n    if (queuedSampleCount >= groupSize) {\n      const samplesByChannel = await Promise.all(\n        channels\n          .map((_, ch) =>\n            updatesQueue.reduce((chunks, update) => [...chunks, update[ch]], [])\n          )\n          .map(async (chunks) => {\n            const arrayBuffer = await new Blob(chunks).arrayBuffer();\n            return new Float32Array(arrayBuffer);\n          })\n      );\n      const peaksByChannel = samplesByChannel.map((samples) =>\n        findSamplePeak(new Float32Array(samples.buffer, 0, groupSize))\n      );\n      peaks[peakOffsetRef.current] = Math.max(...peaksByChannel);\n      drawRecordingPeaks({\n        canvas: /** @type {HTMLCanvasElement} */ (\n          recordButtonCanvasRef.current\n        ),\n        peaks,\n        peakOffset: peakOffsetRef.current,\n        scaleCoefficient: 0.3,\n      });\n      peakOffsetRef.current++;\n      updatesQueueRef.current = [\n        samplesByChannel.map((samples) => samples.slice(groupSize)),\n      ];\n    }\n  }, []);\n\n  const {\n    captureDevices,\n    accessState,\n    selectedCaptureDeviceId,\n    selectedChannelCount,\n    captureState,\n    recordingError,\n    maxSamples,\n    refreshCaptureDevices,\n    setSelectedCaptureDeviceId,\n    setSelectedChannelCount,\n    beginRecording,\n    stopRecording,\n  } = useMediaRecording(onRecordUpdate, onRecordFinish);\n\n  useEffect(() => {\n    const canvas = recordButtonCanvasRef.current;\n    if (canvas) {\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n    }\n  }, [accessState]);\n\n  // set up empty recording waveform data when recording starts\n  useLayoutEffect(() => {\n    const canvas = recordButtonCanvasRef.current;\n    if (!canvas) {\n      return;\n    }\n    if (captureState !== 'finalizing') {\n      /** @type {CanvasRenderingContext2D} */ (\n        canvas.getContext('2d')\n      ).clearRect(0, 0, canvas.width, canvas.height);\n    }\n    if (captureState === 'capturing' && maxSamples) {\n      groupSizeRef.current = Math.floor(\n        (groupPixelWidth * maxSamples) / recordButtonCanvasRef.current.width\n      );\n      peaksRef.current = new Float32Array(\n        Math.floor(maxSamples / groupSizeRef.current)\n      );\n      peakOffsetRef.current = 0;\n      updatesQueueRef.current = [];\n    }\n  }, [maxSamples, captureState]);\n\n  const [showingCaptureConfig, setShowingCaptureConfig] = useState(false);\n\n  return (\n    <div>\n      {accessState === 'denied' ? (\n        <p>\n          Looks like you didn't grant access to your audio input device. Please\n          give Volca Sampler access, then{' '}\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={refreshCaptureDevices}\n          >\n            try again\n          </Button>\n        </p>\n      ) : accessState === 'unavailable' ? (\n        <p>\n          Volca Sampler couldn't find any audio input devices. Please connect\n          one, then{' '}\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={refreshCaptureDevices}\n          >\n            try again\n          </Button>\n        </p>\n      ) : (\n        <div>\n          <h2>Send a new sound to your Volca Sample!</h2>\n          <Button\n            className={classes.recordButton}\n            type=\"button\"\n            variant={captureState === 'capturing' ? 'danger' : 'primary'}\n            size=\"lg\"\n            style={{ width: 250 }}\n            onClick={\n              captureState === 'capturing'\n                ? () => stopRecording()\n                : beginRecording\n            }\n            disabled={captureState === 'finalizing'}\n          >\n            <canvas ref={recordButtonCanvasRef} />\n            <span>\n              {['capturing', 'finalizing'].includes(captureState)\n                ? 'Finished recording'\n                : 'Start recording'}\n            </span>\n          </Button>\n          {['capturing', 'finalizing'].includes(captureState) ? (\n            <>\n              <br />\n              <br />\n              <Button\n                style={{ width: 250 }}\n                size=\"sm\"\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => stopRecording(true)}\n              >\n                Cancel\n              </Button>\n            </>\n          ) : (\n            <>\n              <br />\n              <Button\n                style={{ width: 250 }}\n                type=\"button\"\n                variant=\"light\"\n                size=\"sm\"\n                onClick={() => setShowingCaptureConfig((showing) => !showing)}\n              >\n                Audio input settings {showingCaptureConfig ? '▲' : '▼'}\n              </Button>\n              <Collapse in={showingCaptureConfig}>\n                <div>\n                  <Form.Group>\n                    <Form.Label>Capture Device</Form.Label>\n                    <Form.Select\n                      style={{ width: 250 }}\n                      value={selectedCaptureDeviceId}\n                      onChange={(e) =>\n                        setSelectedCaptureDeviceId(e.target.value)\n                      }\n                    >\n                      {captureDevices && accessState === 'ok' ? (\n                        [...captureDevices].map(([id, { device }]) => (\n                          <option key={id} value={id}>\n                            {device.label || id}\n                          </option>\n                        ))\n                      ) : (\n                        <option value=\"\" disabled>\n                          Loading devices...\n                        </option>\n                      )}\n                    </Form.Select>\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label>Input channels</Form.Label>\n                    <Form.Select\n                      style={{ width: 250 }}\n                      value={selectedChannelCount}\n                      onChange={(e) =>\n                        setSelectedChannelCount(Number(e.target.value))\n                      }\n                    >\n                      {[1, 2].map((count) => (\n                        <option\n                          key={count}\n                          value={count}\n                          disabled={\n                            !captureDevices ||\n                            !captureDevices.has(selectedCaptureDeviceId) ||\n                            /** @type {import('./utils/recording').AudioDeviceInfoContainer} */ (\n                              captureDevices.get(selectedCaptureDeviceId)\n                            ).channelsAvailable < count\n                          }\n                        >\n                          {count === 1 ? 'Mono' : 'Stereo (summed to mono)'}\n                        </option>\n                      ))}\n                    </Form.Select>\n                  </Form.Group>\n                  <br />\n                </div>\n              </Collapse>\n            </>\n          )}\n        </div>\n      )}\n      {(captureState === 'error' && recordingError) || null}\n      <br />\n      <Button\n        style={{ width: 250 }}\n        type=\"button\"\n        variant=\"secondary\"\n        onClick={(e) => {\n          const input = e.currentTarget.querySelector('input');\n          if (input && e.target !== input) {\n            input.click();\n          }\n        }}\n      >\n        Or import an audio file\n        <input\n          hidden\n          type=\"file\"\n          accept=\"audio/*,.wav,.mp3,.ogg\"\n          onChange={(e) => {\n            if (e.target.files && e.target.files.length) {\n              const file = e.target.files[0];\n              file.arrayBuffer().then(async (arrayBuffer) => {\n                const audioFileBuffer = new Uint8Array(arrayBuffer);\n                /**\n                 * @type {AudioBuffer}\n                 */\n                let audioBuffer;\n                try {\n                  audioBuffer = await getAudioBufferForAudioFileData(\n                    audioFileBuffer\n                  );\n                } catch (err) {\n                  alert('Unsupported audio format detected');\n                  return;\n                }\n                if (audioBuffer.length > 10 * audioBuffer.sampleRate) {\n                  alert(\n                    'Please select an audio file no more than 10 seconds long'\n                  );\n                  return;\n                }\n                onRecordFinish(audioFileBuffer, file);\n              });\n            }\n          }}\n        />\n      </Button>\n    </div>\n  );\n}\n\nexport default SampleRecord;\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { styled } from 'tonami';\n\nimport Header from './Header.js';\nimport SampleList from './SampleList.js';\nimport SampleDetail from './SampleDetail.js';\nimport SampleRecord from './SampleRecord.js';\nimport {\n  getFactorySamples,\n  SampleContainer,\n  storeAudioSourceFile,\n} from './store.js';\nimport { getSamplePeaksForSourceFile } from './utils/waveform.js';\nimport { Accordion, ListGroup, Offcanvas } from 'react-bootstrap';\n\nconst MainLayout = styled.div({\n  padding: '2rem',\n  display: 'flex',\n  height: '100%',\n});\n\nconst FocusedSampleContainer = styled.div({\n  flexGrow: 1,\n});\n\nfunction App() {\n  const [userSamples, setUserSamples] = useState(\n    /** @type {Map<string, SampleContainer>} */ (new Map())\n  );\n  const [factorySamples, setFactorySamples] = useState(\n    /** @type {Map<string, SampleContainer>} */ (new Map())\n  );\n  const allSamples = useMemo(() => {\n    return new Map([...userSamples, ...factorySamples]);\n  }, [userSamples, factorySamples]);\n  useEffect(() => {\n    getFactorySamples().then(setFactorySamples).catch(console.error);\n  }, []);\n  const [focusedSampleId, setFocusedSampleId] = useState(\n    /** @type {string | null} */ (null)\n  );\n  const [loadingSamples, setLoadingSamples] = useState(true);\n  useEffect(() => {\n    // TODO: error handling\n    SampleContainer.getAllFromStorage()\n      .then((storedSamples) => {\n        setUserSamples(\n          (samples) =>\n            new Map([\n              ...samples,\n              ...storedSamples.map(\n                (sample) =>\n                  /** @type {[string, SampleContainer]} */ ([sample.id, sample])\n              ),\n            ])\n        );\n        // TODO: automatically set focused sample id to first.. easier with useReducer maybe\n      })\n      .finally(() => {\n        setLoadingSamples(false);\n      });\n  }, []);\n\n  /**\n   * @type {(audioFileBuffer: Uint8Array, userFile?: File) => void}\n   * */\n  const handleRecordFinish = useCallback(async (audioFileBuffer, userFile) => {\n    const sourceFileId = await storeAudioSourceFile(audioFileBuffer);\n    /**\n     * @type {string}\n     */\n    let name = '';\n    let userFileExtension = '';\n    if (userFile) {\n      const lastDotIndex = userFile.name.lastIndexOf('.');\n      if (lastDotIndex > 0) {\n        name = userFile.name.slice(0, lastDotIndex);\n        userFileExtension = userFile.name.slice(lastDotIndex);\n      } else {\n        name = userFile.name;\n      }\n    } else {\n      name = 'New sample';\n    }\n    /**\n     * @type {[number, number]}\n     */\n    const trimFrames = [0, 0];\n    const waveformPeaks = await getSamplePeaksForSourceFile(\n      sourceFileId,\n      trimFrames\n    );\n    const sample = new SampleContainer.Mutable({\n      name,\n      sourceFileId,\n      trim: {\n        frames: trimFrames,\n        waveformPeaks,\n      },\n      userFileInfo: userFile && {\n        type: userFile.type,\n        ext: userFileExtension,\n      },\n    });\n    await sample.persist();\n    setUserSamples((samples) => new Map([[sample.id, sample], ...samples]));\n    setFocusedSampleId(sample.id);\n  }, []);\n\n  /**\n   * @type {(id: string, update: import('./store').SampleMetadataUpdateArg) => void}\n   */\n  const handleSampleUpdate = useCallback((id, updater) => {\n    setUserSamples((samples) => {\n      const sample = samples.get(id);\n      if (sample && sample instanceof SampleContainer.Mutable) {\n        const updated = sample.update(updater);\n        if (updated !== sample) {\n          return new Map(samples).set(sample.id, updated);\n        }\n      }\n      return samples;\n    });\n  }, []);\n\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const handleSampleSelect = useCallback(\n    /**\n     * @param {string | null} sampleId\n     */\n    (sampleId) => {\n      setFocusedSampleId(sampleId);\n      setSidebarOpen(false);\n    },\n    []\n  );\n\n  return (\n    <div>\n      <Header\n        onMenuOpen={() => setSidebarOpen(true)}\n        onHeaderClick={() => setFocusedSampleId(null)}\n      />\n      <Offcanvas show={sidebarOpen} onHide={() => setSidebarOpen(false)}>\n        <Offcanvas.Header closeButton />\n        <Offcanvas.Body>\n          <ListGroup>\n            <ListGroup.Item\n              as=\"button\"\n              onClick={() => handleSampleSelect(null)}\n            >\n              New Sample\n            </ListGroup.Item>\n            {loadingSamples ? 'Loading...' : null}\n            {!loadingSamples && (\n              <Accordion\n                defaultActiveKey={userSamples.size ? 'user' : 'factory'}\n              >\n                <Accordion.Item eventKey=\"user\">\n                  <Accordion.Header>Your Samples</Accordion.Header>\n                  <Accordion.Body style={{ padding: 0 }}>\n                    <SampleList\n                      samples={userSamples}\n                      selectedSampleId={focusedSampleId}\n                      onSampleSelect={handleSampleSelect}\n                    />\n                  </Accordion.Body>\n                </Accordion.Item>\n                <Accordion.Item eventKey=\"factory\">\n                  <Accordion.Header>Factory Samples</Accordion.Header>\n                  <Accordion.Body style={{ padding: 0 }}>\n                    <SampleList\n                      samples={factorySamples}\n                      selectedSampleId={focusedSampleId}\n                      onSampleSelect={handleSampleSelect}\n                    />\n                  </Accordion.Body>\n                </Accordion.Item>\n              </Accordion>\n            )}\n          </ListGroup>\n        </Offcanvas.Body>\n      </Offcanvas>\n      <MainLayout>\n        <FocusedSampleContainer>\n          {focusedSampleId && (\n            <SampleDetail\n              sample={allSamples.get(focusedSampleId) || null}\n              onSampleUpdate={handleSampleUpdate}\n              onSampleDuplicate={(id) => {\n                const sample = allSamples.get(id);\n                if (sample) {\n                  const newSample = sample.duplicate();\n                  setUserSamples(\n                    (samples) =>\n                      new Map([[newSample.id, newSample], ...samples])\n                  );\n                  // TODO: scroll new sample into view\n                  setFocusedSampleId(newSample.id);\n                }\n              }}\n              onSampleDelete={(id) => {\n                const sample = allSamples.get(id);\n                if (sample && sample instanceof SampleContainer.Mutable) {\n                  sample.remove();\n                  setUserSamples((samples) => {\n                    const newSamples = new Map(samples);\n                    newSamples.delete(sample.id);\n                    return newSamples;\n                  });\n                }\n              }}\n            />\n          )}\n          {!focusedSampleId && (\n            <SampleRecord onRecordFinish={handleRecordFinish} />\n          )}\n        </FocusedSampleContainer>\n      </MainLayout>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * @param {import('web-vitals').ReportHandler} [onPerfEntry]\n */\nconst reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.scss';\nimport App from './App.js';\nimport reportWebVitals from './reportWebVitals.js';\nimport { AudioPlaybackContextProvider } from './utils/audioData.js';\n\n// polyfills\nif (!Blob.prototype.arrayBuffer) {\n  Blob.prototype.arrayBuffer = function arrayBuffer() {\n    return new Response(this).arrayBuffer();\n  };\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AudioPlaybackContextProvider>\n      <App />\n    </AudioPlaybackContextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}